var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Debug from 'debug';
import * as fs from 'fs';
import { pathExists, lstat, ensureDir, remove, writeFile } from 'fs-extra';
import { basename, join } from 'path';
import { dir as tmpDir, file as tmpFile } from 'tmp';
import { isDirectory } from './util';
const debug = Debug('k8s/cmds/copy');
debug('loading');
const copyFile = (src, target) => new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
    debug('copyFile', src, target);
    let targetFile = target;
    if (yield pathExists(target)) {
        if ((yield lstat(target)).isDirectory()) {
            targetFile = join(target, basename(src));
        }
    }
    fs.readFile(src, (err, data) => {
        if (err) {
            reject(err);
        }
        else {
            resolve(writeFile(targetFile, data));
        }
    });
}));
export const copy = (src, target) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        debug('copy', src, target);
        const targetFolder = join(target, basename(src));
        yield ensureDir(targetFolder);
        fs.readdir(src, (err, files) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(Promise.all(files.map(file => new Promise((resolve, reject) => {
                    const srcFile = join(src, file);
                    fs.lstat(srcFile, (err, stats) => {
                        if (err) {
                            reject(err);
                        }
                        else if (stats.isDirectory()) {
                            resolve(copy(srcFile, targetFolder));
                        }
                        else {
                            resolve(copyFile(srcFile, targetFolder));
                        }
                    });
                }))));
            }
        });
    }));
});
export const copyOutDirectory = (srcDir, fn) => new Promise((resolve, reject) => {
    debug('copyOutDirectory', srcDir);
    tmpDir((err, path, cleanupCallback) => __awaiter(void 0, void 0, void 0, function* () {
        if (err) {
            cleanupCallback();
            reject(err);
        }
        else {
            const targetDir = join(path, basename(srcDir));
            try {
                debug('we need to copy out of the asar', srcDir, path);
                yield copy(srcDir, path);
                debug('copy-out of complete');
                if (fn) {
                    resolve(yield fn(targetDir));
                }
                else {
                    resolve(targetDir);
                }
            }
            catch (err) {
                reject(err);
            }
            finally {
                if (fn) {
                    yield remove(targetDir);
                    cleanupCallback();
                }
            }
        }
    }));
});
export const copyOutFile = (src) => new Promise((resolve, reject) => {
    debug('copyOutFile', src);
    tmpFile((err, path, fd, cleanupCallback) => __awaiter(void 0, void 0, void 0, function* () {
        if (err) {
            cleanupCallback();
            reject(err);
        }
        else {
            yield copyFile(src, path);
            resolve(path);
        }
    }));
});
export const copyOut = (src, fn) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield isDirectory(src)) {
        return copyOutDirectory(src, fn);
    }
    else {
        return copyOutFile(src);
    }
});
//# sourceMappingURL=copy.js.map