var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Common, CLI, ReplExpect, Selectors } from '@kui-shell/test';
describe('about contexts', function () {
    before(Common.before(this));
    after(Common.after(this));
    it('should issue about command', () => CLI.command('about', this.app)
        .then(ReplExpect.justOK)
        .catch(Common.oops(this)));
    it('click on contexts tab', () => __awaiter(this, void 0, void 0, function* () {
        try {
            yield this.app.client.waitForExist(Selectors.SIDECAR_MODE_BUTTON('contexts'));
            yield this.app.client.click(Selectors.SIDECAR_MODE_BUTTON('contexts'));
            yield this.app.client.waitForExist(Selectors.SIDECAR_MODE_BUTTON_SELECTED('contexts'));
            yield this.app.client.waitForExist(`${Selectors.SIDECAR_CUSTOM_CONTENT} .bx--data-table`);
        }
        catch (err) {
            yield Common.oops(this, true);
        }
    }));
});
//# sourceMappingURL=about.js.map