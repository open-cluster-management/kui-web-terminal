"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = require("debug");
const tab_completion_1 = require("@kui-shell/plugin-core-support/tab-completion");
const debug = debug_1.default('plugins/bash-like/tab-completion/git');
function completeGitBranches(tab, commandLine, spec) {
    return __awaiter(this, void 0, void 0, function* () {
        const args = commandLine.argvNoOptions;
        const { toBeCompleted } = spec;
        if (args[0] === 'git' && (args[1] === 'checkout' || args[1] === 'branch')) {
            try {
                const completions = yield tab.REPL.qexec(`! git branch --list ${toBeCompleted ? toBeCompleted + '*' : ''} --sort=refname --sort=committerdate`, undefined, undefined, { raw: true });
                return completions
                    .split(/[\n\r]/)
                    .filter(_ => _)
                    .map(_ => _.trim());
            }
            catch (err) {
                debug('squashing error from attempted git tab completion', err);
                return [];
            }
        }
    });
}
exports.default = () => {
    tab_completion_1.registerTabCompletionEnumerator(completeGitBranches);
};
//# sourceMappingURL=git.js.map