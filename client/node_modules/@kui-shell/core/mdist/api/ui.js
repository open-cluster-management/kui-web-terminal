import * as CLI from '../webapp/cli';
import * as Inject from '../webapp/util/inject';
import * as Dom from '../webapp/util/dom';
import { clearSelection } from '../webapp/views/sidecar-visibility';
import * as ModeRegistrar from '../webapp/views/registrar/modes';
import * as BadgeRegistrar from '../webapp/views/registrar/badges';
import _Presentation from '../webapp/views/presentation';
import * as keys from '../webapp/keys';
import * as Time from '../webapp/util/time';
import formatAsPty from '../webapp/util/pretty-print';
import * as _Editor from '../webapp/views/registrar/editors';
import * as _TopTabs from '../webapp/views/top-tabs';
import * as _ToolbarText from '../webapp/views/toolbar-text';
import * as _Themes from '../webapp/themes';
import * as Tabs from '../webapp/tab';
import * as Block from '../webapp/block';
import * as Prompt from '../webapp/prompt';
import * as Scroll from '../webapp/scroll';
import * as PromptForInput from '../webapp/prompt-for-input';
export var UI;
(function (UI) {
    UI.injectCSS = Inject.injectCSS;
    UI.uninjectCSS = Inject.uninjectCSS;
    UI.injectScript = Inject.injectScript;
    UI.loadHTML = Inject.loadHTML;
    UI.empty = Dom.removeAllDomChildren;
    UI.registerMode = ModeRegistrar.registerSidecarMode;
    UI.registerModeWhen = ModeRegistrar.registerModeWhen;
    UI.registerBadge = BadgeRegistrar.registerSidecarBadge;
    UI.Themes = _Themes;
    UI.ToolbarText = _ToolbarText.ToolbarTextImpl;
    UI.TopTabs = _TopTabs;
    let Editor;
    (function (Editor) {
        Editor.registerProvider = _Editor.registerEditor;
    })(Editor = UI.Editor || (UI.Editor = {}));
    UI.Presentation = _Presentation;
    UI.isPopup = CLI.isPopup;
    UI.getCurrentPrompt = Prompt.getCurrentPrompt;
    UI.getCurrentBlock = Block.getCurrentBlock;
    let PrettyPrinters;
    (function (PrettyPrinters) {
        PrettyPrinters.time = Time.prettyPrintTime;
        PrettyPrinters.ansi = formatAsPty;
    })(PrettyPrinters = UI.PrettyPrinters || (UI.PrettyPrinters = {}));
    let Keys;
    (function (Keys) {
        Keys.Codes = keys.keys;
        Keys.isCursorMovement = keys.isCursorMovement;
    })(Keys = UI.Keys || (UI.Keys = {}));
    UI.closeAllViews = (tab) => {
        clearSelection(tab);
    };
    let LowLevel;
    (function (LowLevel) {
        LowLevel.prompt = PromptForInput.prompt;
        LowLevel.partialInput = Prompt.partial;
        LowLevel.scrollIntoView = Scroll.scrollIntoView;
        LowLevel.doCancel = CLI.doCancel;
        LowLevel.isUsingCustomPrompt = Prompt.isUsingCustomPrompt;
    })(LowLevel = UI.LowLevel || (UI.LowLevel = {}));
})(UI || (UI = {}));
export { Tabs };
export default UI;
//# sourceMappingURL=ui.js.map