"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
// Hack to workaround build issues with Carbon dependencies
if (!window || !window.navigator || !window.navigator.userAgent) {
    Object.defineProperty(window, 'navigator', { value: { userAgent: 'node' }, writable: true });
    Object.defineProperty(document, 'getElementById', { value: function (val) { return document.querySelector('#' + val); }, writable: true });
}
var React = require("react");
var lodash = require("lodash");
var PropTypes = require("prop-types");
var search_definitions_1 = require("../definitions/search-definitions");
var Modal_1 = require("../components/Modal");
var carbon_components_react_1 = require("carbon-components-react");
var repl = require("@kui-shell/core");
var i18n_1 = require("../util/i18n");
var icons_react_1 = require("@carbon/icons-react");
var status_1 = require("../util/status");
var Table = carbon_components_react_1.DataTable.Table, TableHead = carbon_components_react_1.DataTable.TableHead, TableRow = carbon_components_react_1.DataTable.TableRow, TableBody = carbon_components_react_1.DataTable.TableBody, TableCell = carbon_components_react_1.DataTable.TableCell;
var PAGE_SIZES = { DEFAULT: 10, VALUES: [5, 10, 20, 50, 75, 100] };
var ResourceTable = /** @class */ (function (_super) {
    __extends(ResourceTable, _super);
    function ResourceTable(props) {
        var _this = _super.call(this, props) || this;
        _this.toggleCollapseTable = function () {
            _this.setState(function (_a) {
                var collapse = _a.collapse;
                return { collapse: !collapse };
            });
        };
        _this.handleSort = function (selectedKey) { return function () {
            if (selectedKey) {
                _this.setState(function (preState) {
                    return { selectedKey: selectedKey, sortDirection: preState.sortDirection === 'asc' ? 'desc' : 'asc' };
                });
            }
        }; };
        _this.state = {
            itemToDelete: {},
            page: 1,
            pageSize: PAGE_SIZES.DEFAULT,
            sortDirection: 'asc',
            selectedKey: '',
            modalOpen: false,
            collapse: false
        };
        _this.getHeaders = _this.getHeaders.bind(_this);
        _this.getRows = _this.getRows.bind(_this);
        return _this;
    }
    ResourceTable.prototype.componentWillReceiveProps = function (nextProps) {
        this.setState({
            collapse: nextProps.collapseTable
        });
    };
    ResourceTable.prototype.getHeaders = function () {
        var kind = this.props.kind;
        var resource = search_definitions_1["default"][kind] || search_definitions_1["default"]['genericresource'];
        var headers = resource.columns.map(function (col) { return ({
            key: col.key, header: i18n_1["default"]("table.header." + (col.msgKey || col.key))
        }); });
        headers.push({ key: 'action', header: '' });
        return headers;
    };
    ResourceTable.prototype.getRows = function () {
        var _this = this;
        var items = this.props.items;
        var kind = this.props.kind;
        var transforms = search_definitions_1["default"][kind] || search_definitions_1["default"]['genericresource'];
        var _a = this.state, page = _a.page, pageSize = _a.pageSize, selectedKey = _a.selectedKey, sortDirection = _a.sortDirection;
        if (selectedKey) {
            items = lodash.orderBy(items, [selectedKey], [sortDirection]);
        }
        var startItem = (page - 1) * pageSize;
        var visibleItems = items.slice(startItem, startItem + pageSize);
        // Get all the transforms for current kind defined in search-definitions
        transforms = transforms.columns.filter(function (rowCol) { return rowCol.transform; });
        return visibleItems.map(function (item, i) {
            var row = __assign({ id: i.toString(), action: null }, item);
            // Transform each key that has a transform and assign it back to the row item
            if (transforms.length > 0) {
                transforms.forEach(function (transform) {
                    // NOTE - this will only work for getAge transfrom currently
                    row[transform.key] = transform.transform(item, null, transform.key);
                });
            }
            if (_this.props.kind !== 'cluster' && _this.props.kind !== 'release') {
                row.action = (React.createElement(icons_react_1.Delete16, { className: 'table-action-remove', onClick: function () { return _this.setState({ itemToDelete: item, modalOpen: true }); } }));
            }
            return row;
        });
    };
    ResourceTable.prototype.render = function () {
        var _this = this;
        var _a = this.state, page = _a.page, pageSize = _a.pageSize, sortDirection = _a.sortDirection, selectedKey = _a.selectedKey, modalOpen = _a.modalOpen, collapse = _a.collapse;
        var totalItems = this.props.items.length;
        var sortColumn = selectedKey;
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'search--resource-table-header' },
                React.createElement("div", null, React.createElement("button", { onClick: this.toggleCollapseTable, className: 'search--resource-table-header-button' },
                    React.createElement("span", { className: 'linked-resources' }, this.props.kind + "(" + this.props.items.length + ")"),
                    !collapse ? React.createElement("span", { className: 'arrow-up' }, "\u25B2") : React.createElement("span", { className: 'arrow-down' }, "\u25BC")))),
            !collapse
                ? React.createElement(React.Fragment, null,
                    React.createElement(carbon_components_react_1.DataTable, { key: this.props.kind + "-resource-table", rows: this.getRows(), headers: this.getHeaders(), render: function (_a) {
                            var rows = _a.rows, headers = _a.headers;
                            return (React.createElement(Table, null,
                                React.createElement(TableHead, null,
                                    React.createElement(TableRow, null, headers.map(function (header) { return (React.createElement("th", { scope: 'col', key: header.key }, header.key !== 'action'
                                        ? React.createElement("div", { onClick: _this.handleSort(header.key), className: "bx--table-sort-v2" + (sortDirection === 'asc' ? ' bx--table-sort-v2--ascending' : '') + (sortColumn === header.key ? ' bx--table-sort-v2--active' : ''), "data-key": header.key },
                                            React.createElement("span", { className: 'bx--table-header-label' },
                                                header.header,
                                                React.createElement("span", { className: 'arrow-header-label' }, _this.state.sortDirection === 'asc'
                                                    ? React.createElement("span", null, "\u25B2")
                                                    : React.createElement("span", null, "\u25BC"))))
                                        : null)); }))),
                                React.createElement(TableBody, null, rows.map(function (row) { return (React.createElement(TableRow, { key: row.id, className: 'bx--data-table--compact' }, row.cells.map(function (cell) { return React.createElement(TableCell, { key: cell.id, onClick: function () {
                                        var ns = row.cells.filter(function (data) { return data.info.header === 'namespace'; });
                                        if (_this.props.kind === 'savedSearches' && cell.info['header'] === 'name') {
                                            // When user clicks on saved search name we want to run the query seen in search text column
                                            return repl.internalBeCarefulPExec("search " + row.cells[2].value);
                                        }
                                        else if (cell.info['header'] === 'name' && ns.length > 0 && ns[0].value) {
                                            return repl.internalBeCarefulPExec("search summary kind:" + _this.props.kind + " name:" + cell.value + " namespace:" + row.cells[1].value);
                                        }
                                        else if (cell.info['header'] === 'name') {
                                            return repl.internalBeCarefulPExec("search summary kind:" + _this.props.kind + " name:" + row.cells[0].value);
                                        }
                                        else {
                                            return null;
                                        }
                                    } }, cell.info['header'] !== 'status'
                                    ? cell.value
                                    : React.createElement("div", null,
                                        status_1["default"].Success.includes(cell.value)
                                            ? React.createElement(icons_react_1.CheckmarkFilled16, { className: "status-success" })
                                            : status_1["default"].Warning.includes(cell.value)
                                                ? React.createElement(icons_react_1.WarningFilled16, { className: "status-warning" })
                                                : status_1["default"].Failed.includes(cell.value)
                                                    ? React.createElement(icons_react_1.ErrorFilled16, { className: "status-failed" })
                                                    : status_1["default"].Completed.includes(cell.value)
                                                        ? React.createElement(icons_react_1.CheckmarkFilled16, { className: "status-completed" })
                                                        : null,
                                        React.createElement("span", { className: "status-name" }, "" + cell.value))); }))); }))));
                        } }),
                    this.props.items.length > PAGE_SIZES.DEFAULT
                        ? React.createElement(carbon_components_react_1.Pagination, { key: 'resource-table-pagination', id: 'resource-table-pagination', onChange: function (pagination) { return _this.setState(pagination); }, pageSize: pageSize, pageSizes: PAGE_SIZES.VALUES, totalItems: totalItems, page: page, disabled: pageSize >= totalItems, isLastPage: pageSize >= totalItems, itemsPerPageText: i18n_1["default"]('pagination.itemsPerPage'), pageRangeText: function (current, total) { return i18n_1["default"]('pagination.pageRange', [current, total]); }, itemRangeText: function (min, max, total) { return i18n_1["default"]('pagination.itemRange', [min, max]) + " " + i18n_1["default"]('pagination.itemRangeDescription', [total]); }, pageInputDisabled: pageSize >= totalItems })
                        : null)
                : null,
            React.createElement(Modal_1["default"], { item: this.state.itemToDelete, modalOpen: modalOpen, onClose: function () { return _this.setState({ modalOpen: false }); } })));
    };
    ResourceTable.propTypes = {
        collapseTable: PropTypes.bool,
        expandFullPage: PropTypes.bool,
        items: PropTypes.array,
        kind: PropTypes.string
    };
    return ResourceTable;
}(React.PureComponent));
exports["default"] = ResourceTable;
