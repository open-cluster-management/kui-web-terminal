/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
declare const _default: {
    application: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: string[];
    };
    applicationrelationship: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    cluster: {
        columns: ({
            key: string;
            msgKey?: undefined;
        } | {
            key: string;
            msgKey: string;
        })[];
        actions: string[];
    };
    configmap: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    cronjob: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any) => string;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    daemonset: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    deployable: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    deployment: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    genericresource: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    job: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    namespace: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    node: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    persistentvolume: {
        columns: ({
            key: string;
            msgKey?: undefined;
            transform?: undefined;
        } | {
            key: string;
            msgKey: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
            msgKey?: undefined;
        })[];
        actions: any[];
    };
    persistentvolumeclaim: {
        columns: ({
            key: string;
            msgKey?: undefined;
            transform?: undefined;
        } | {
            key: string;
            msgKey: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
            msgKey?: undefined;
        })[];
        actions: any[];
    };
    placementbinding: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    placementpolicy: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    pod: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: string[];
    };
    policy: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    release: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any) => string;
        })[];
        actions: string[];
    };
    replicaset: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    savedSearches: {
        columns: {
            key: string;
        }[];
        actions: string[];
    };
    secret: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
    };
    service: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
    statefulset: {
        columns: ({
            key: string;
            transform?: undefined;
        } | {
            key: string;
            transform: (item: any, locale: any, timestampKey: any) => string;
        })[];
        actions: any[];
    };
};
export default _default;
