"use strict";
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
// Hack to workaround build issues with Carbon dependencies
if (!window || !window.navigator || !window.navigator.userAgent) {
    Object.defineProperty(window, 'navigator', { value: { userAgent: 'node' }, writable: true });
    Object.defineProperty(document, 'getElementById', { value: function (val) { return document.querySelector('#' + val); }, writable: true });
}
var React = require("react");
var PropTypes = require("prop-types");
var core_1 = require("@kui-shell/core");
var carbon_components_react_1 = require("carbon-components-react");
var i18n_1 = require("../util/i18n");
var core_2 = require("@kui-shell/core");
var HTTPClient_1 = require("../controller/HTTPClient");
var search_queries_1 = require("../definitions/search-queries");
var search_helper_1 = require("../util/search-helper");
var ResourceModal = /** @class */ (function (_super) {
    __extends(ResourceModal, _super);
    function ResourceModal(props) {
        var _this = _super.call(this, props) || this;
        _this.originalInput = false;
        _this.state = {
            description: '',
            name: '',
            errors: null,
            open: true
        };
        _this.handleDescriptionChange = _this.handleDescriptionChange.bind(_this);
        _this.handleNameChange = _this.handleNameChange.bind(_this);
        return _this;
    }
    ResourceModal.prototype.handleDelete = function () {
        var item = this.props.item;
        switch (item['kind']) {
            case 'savedSearches':
                // Backend doesn't handle error case when deleting a saved query
                core_1.getCurrentTab().REPL.pexec("deleteSavedSearch " + item['name']);
                this.props.onClose();
                break;
            default:
                core_1.getCurrentTab().REPL.pexec("deleteResource " + item['name'] + " " + item['namespace'] + " " + item['kind'] + " " + item['cluster'] + " " + item['selfLink']);
                this.props.onClose();
        }
    };
    ResourceModal.prototype.handleEdit = function () {
        var _this = this;
        var item = this.props.item;
        var data = {
            name: this.state.name,
            description: this.state.description,
            searchText: item['searchText'],
            id: item['id']
        };
        if (!this.state.errors) {
            HTTPClient_1["default"]('post', 'search', search_queries_1.SAVE_SEARCH(data))
                .then(function (res) {
                core_1.getCurrentTab().REPL.pexec("savedsearches");
                _this.props.onClose();
            })["catch"](function (err) {
                _this.setState({ errors: err });
            });
        }
    };
    ResourceModal.prototype.handleSave = function () {
        var _this = this;
        var id = Date.now().toString();
        var data = {
            name: this.state.name,
            description: this.state.description,
            searchText: this.props.item['command'].replace(/search|--save/g, '').trim(),
            id: id
        };
        var userQuery = search_helper_1.convertStringToQuery(data.searchText);
        HTTPClient_1["default"]('post', 'search', search_queries_1.SEARCH_RELATED_QUERY(userQuery.keywords, userQuery.filters)) // Check to see if the query is vaild
            .then(function (res) {
            if (res.data.searchResult[0].items) {
                HTTPClient_1["default"]('post', 'search', search_queries_1.SAVE_SEARCH(data))
                    .then(function (resp) {
                    _this.setState({ open: false });
                    core_1.getCurrentTab().REPL.pexec('savedsearches');
                })["catch"](function (err) {
                    _this.setState({ errors: err });
                });
            }
        })["catch"](function (err) {
            _this.setState({ errors: err });
        });
    };
    ResourceModal.prototype.componentDidUpdate = function () {
        var _this = this;
        if (!this.props.modalOpen) { // If the modal is closed, clear old data values
            this.setState({ name: '', description: '', errors: undefined });
            this.originalInput = false;
        }
        if (this.props.action === 'edit' && this.props.modalOpen && !this.originalInput) { // When the modal opens, it should display the saved query data in the input's sections
            HTTPClient_1["default"]('post', 'search', search_queries_1.SAVED_SEARCH_QUERY)
                .then(function (res) {
                var data = res.data.items.filter(function (item) { return item.name === _this.props.item['name']; });
                if (data.length === 0) { // Saved search is no longer available.
                    _this.setState({ errors: i18n_1["default"]('modal.edit.deleted.search') });
                }
            });
            this.setState({ name: this.props.item['name'], description: this.props.item['description'] });
            this.originalInput = true;
        }
    };
    ResourceModal.prototype.handleNameChange = function (event) {
        this.setState({ name: event.target.value });
    };
    ResourceModal.prototype.handleDescriptionChange = function (event) {
        this.setState({ description: event.target.value });
    };
    ResourceModal.prototype.render = function () {
        var _this = this;
        var _a = this.props, item = _a.item, modalOpen = _a.modalOpen;
        var bodyLabel = item['kind'];
        var heading = '';
        switch (this.props.action) {
            case 'edit':
                heading = i18n_1["default"]('modal.query.save.heading');
                break;
            case 'save':
                heading = i18n_1["default"]('modal.save.title');
                break;
            case 'share':
                heading = i18n_1["default"]('modal.query.share.heading');
                break;
            case 'remove':
                heading = i18n_1["default"]('modal.query.delete.heading');
                break;
            default:
                break;
        }
        return (React.createElement(carbon_components_react_1.Modal, { className: this.props.action === 'share' ? 'bx--modal-share' : undefined, danger: this.props.action === 'remove', id: 'remove-resource-modal', open: this.props.action !== 'save' ? modalOpen : this.state.open, primaryButtonText: this.props.action === 'remove' ? i18n_1["default"]('modal.remove-kuberesource.heading') : i18n_1["default"]('actions.save'), primaryButtonDisabled: (this.props.action === 'edit' && this.state.name === '')
                || (this.props.action === 'edit' && this.state.name === this.props.item['name'] && this.state.description === this.props.item['description'])
                || (this.props.action === 'save' && this.state.name === ''), secondaryButtonText: i18n_1["default"]('modal.button.cancel'), modalLabel: bodyLabel ? bodyLabel.toUpperCase() : undefined, modalHeading: heading, onRequestClose: function () { return _this.props.action !== 'save' ? _this.props.onClose() : _this.setState({ open: false }); }, onRequestSubmit: function () { return _this.props.action === 'remove' ? _this.handleDelete() : _this.props.action === 'edit' ? _this.handleEdit() : _this.handleSave(); }, role: 'region', "aria-label": heading },
            this.props.action === 'edit' || this.props.action === 'save'
                ? React.createElement("div", { className: 'bx--action-edit' },
                    this.props.action === 'save' ? React.createElement("p", { className: 'save-text' }, i18n_1["default"]('modal.save.text')) : null,
                    this.state.errors ? React.createElement("p", { className: 'oops save-text-error' }, i18n_1["default"](this.state.errors)) : null,
                    React.createElement(carbon_components_react_1.TextInput, { className: 'bx--action-name', disabled: false, id: 'name', labelText: i18n_1["default"]('modal.query.add.name.label'), maxLength: 50, type: 'text', value: this.state.name, onChange: this.handleNameChange, placeholder: i18n_1["default"]('modal.query.add.name') }),
                    React.createElement(carbon_components_react_1.TextArea, { className: 'bx--action-description', disabled: false, id: 'description', labelText: i18n_1["default"]('modal.query.add.desc.label'), maxLength: 140, type: 'text', value: this.state.description, onChange: this.handleDescriptionChange, placeholder: i18n_1["default"]('modal.query.add.desc') }))
                : null,
            this.props.action === 'share'
                ? React.createElement("div", { className: 'bx--action-share' },
                    React.createElement("p", { className: 'copy-description' }, i18n_1["default"]('modal.query.share.name.label')),
                    React.createElement(carbon_components_react_1.CodeSnippet, { onClick: function () { return navigator.clipboard.writeText(core_2.inBrowser()
                            ? (window && window.location && window.location.href) + "?filters={\"textsearch\":\"" + encodeURIComponent(_this.props.item['searchText']) + "\"}"
                            : "search " + _this.props.item['searchText']); }, type: 'single' }, core_2.inBrowser()
                        ? (window && window.location && window.location.href) + "?filters={\"textsearch\":\"" + encodeURIComponent(this.props.item['searchText']) + "\"}"
                        : "search " + this.props.item['searchText']))
                : null,
            this.props.action === 'remove'
                ? React.createElement("p", null, i18n_1["default"]('modal.remove.confirm', [item['name']]))
                : null));
    };
    ResourceModal.propTypes = {
        item: PropTypes.object,
        modalOpen: PropTypes.bool
    };
    return ResourceModal;
}(React.PureComponent));
exports["default"] = ResourceModal;
