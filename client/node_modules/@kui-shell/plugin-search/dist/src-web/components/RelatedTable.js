"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
// Hack to workaround build issues with Carbon dependencies
if (!window || !window.navigator || !window.navigator.userAgent) {
    Object.defineProperty(window, 'navigator', { value: { userAgent: 'node' }, writable: true });
    Object.defineProperty(document, 'getElementById', { value: function (val) { return document.querySelector('#' + val); }, writable: true });
}
var React = require("react");
var PropTypes = require("prop-types");
var carbon_components_react_1 = require("carbon-components-react");
var repl = require("@kui-shell/core");
var Table = carbon_components_react_1.DataTable.Table, TableRow = carbon_components_react_1.DataTable.TableRow, TableBody = carbon_components_react_1.DataTable.TableBody, TableCell = carbon_components_react_1.DataTable.TableCell;
var RelatedTable = /** @class */ (function (_super) {
    __extends(RelatedTable, _super);
    function RelatedTable(props) {
        var _this = _super.call(this, props) || this;
        _this.getHeaders = _this.getHeaders.bind(_this);
        _this.getRows = _this.getRows.bind(_this);
        return _this;
    }
    RelatedTable.prototype.getHeaders = function () {
        var resource = [{
                key: 'kind',
                header: 'kind'
            }, {
                key: 'count',
                header: 'count'
            }];
        var headers = resource;
        return headers;
    };
    RelatedTable.prototype.getRows = function () {
        var items = this.props.items;
        return items.map(function (record, i) {
            var row = __assign({ id: i.toString() }, record);
            return row;
        });
    };
    RelatedTable.prototype.render = function () {
        var _this = this;
        return (React.createElement(React.Fragment, null,
            React.createElement(carbon_components_react_1.DataTable, { rows: this.getRows(), headers: this.getHeaders(), render: function (_a) {
                    var rows = _a.rows, headers = _a.headers;
                    return (React.createElement(Table, null,
                        React.createElement(TableBody, null, rows.map(function (row) { return (React.createElement(TableRow, { key: row.id, className: 'bx--data-table--related' }, row.cells.map(function (cell) { return React.createElement(TableCell, { key: cell.id, onClick: function () {
                                var result = _this.props.items.filter(function (r) { return r.kind.includes(cell.value); });
                                var command = "search kind:" + cell.value + " name:";
                                result[0].items.forEach(function (element) {
                                    command += element.name + ",";
                                });
                                repl.internalBeCarefulPExec(command.substring(0, command.length - 1));
                            } }, cell.value); }))); }))));
                } })));
    };
    RelatedTable.propTypes = {
        items: PropTypes.array,
        kind: PropTypes.array,
        command: PropTypes.any
    };
    return RelatedTable;
}(React.PureComponent));
exports["default"] = RelatedTable;
