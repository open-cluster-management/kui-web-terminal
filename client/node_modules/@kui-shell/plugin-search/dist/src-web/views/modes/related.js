"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
exports.__esModule = true;
var lodash = require("lodash");
var React = require("react");
var ReactDOM = require("react-dom");
var carbon_components_react_1 = require("carbon-components-react");
var repl = require("@kui-shell/core");
var i18n_1 = require("../../util/i18n");
/**
 * Renders a structured list of related resources for the selected resource's sidecar.
 * @param related
 */
exports.buildRelated = function (related, type) {
    var node = document.createElement('div');
    node.classList.add('scrollable');
    node.classList.add(type !== 'query' ? 'bx--structured-list--summary' : 'bx--tile-related');
    var relatedResource = type !== 'query'
        ? function () {
            return (React.createElement(carbon_components_react_1.StructuredListWrapper, null,
                React.createElement(carbon_components_react_1.StructuredListBody, null, related.map(function (row) { return (React.createElement(carbon_components_react_1.StructuredListRow, { key: "" + row.kind, className: 'bx--structured-list-rowclick' },
                    React.createElement(carbon_components_react_1.StructuredListCell, { onClick: function () {
                            var results = related.filter(function (r) { return r.kind.includes(row.kind); });
                            var command = "search kind:" + row.kind + " name:";
                            results[0].items.forEach(function (element) {
                                command += element.name + ",";
                            });
                            repl.internalBeCarefulPExec(command.substring(0, command.length - 1));
                        } },
                        React.createElement("span", { className: 'bx--structured-list-td-related-header' }, "" + row.count),
                        React.createElement("br", null),
                        React.createElement("span", { className: 'bx--structured-list-td-body' }, "Related " + row.kind)))); }))));
        }
        : function () {
            return (related.map(function (row) { return (React.createElement(carbon_components_react_1.ClickableTile, { key: row.kind, handleClick: function () {
                    var results = related.filter(function (r) { return r.kind.includes(row.kind); });
                    var command = "search kind:" + row.kind + " name:";
                    results[0].items.forEach(function (element) {
                        command += element.name + ",";
                    });
                    repl.internalBeCarefulPExec(command.substring(0, command.length - 1));
                } },
                React.createElement("div", { className: 'bx--tile-container' },
                    React.createElement("span", { className: 'bx--structured-list-td-related-header' }, "" + row.count),
                    React.createElement("br", null),
                    React.createElement("span", { className: 'bx--structured-list-td-body' }, "Related " + row.kind)))); }));
        };
    ReactDOM.render(React.createElement(relatedResource), node);
    return node;
};
/**
 * Renders a related tab for the selected resource's || search query's sidecar.
 * @param resource
 * @param type
 */
exports.relatedTab = function (data, type) {
    var badges = [];
    // This will allow the sidecar balloon element to display the resources name.
    var balloon = lodash.get(data, 'items[0].name', '').split(/(-[0-9])/);
    badges.push(balloon[0]);
    return {
        type: 'custom',
        isEntity: true,
        content: exports.buildRelated(data.related, type),
        badges: type !== 'query' ? badges : null,
        viewName: lodash.get(data, 'items[0].kind', ''),
        name: type !== 'query' ? lodash.get(data, 'items[0].name', '') : i18n_1["default"]('search.label.query', [lodash.get(data, 'items[0].kind', '')]),
        packageName: type !== 'query' ? lodash.get(data, 'items[0].namespace', '') : null,
        modes: [
            {
                defaultMode: true,
                mode: 'related',
                direct: function () { return exports.relatedTab(data, type); },
                leaveBottomStripeAlone: true,
                label: i18n_1["default"]('search.label.related')
            },
        ]
    };
};
