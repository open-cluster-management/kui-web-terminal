"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
exports.__esModule = true;
/**
 * NOTE: See documentation in SearchResourceTable.js
 */
var resource_helper_1 = require("../util/resource-helper");
exports["default"] = {
    application: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: [
            'table.actions.applications.remove',
        ]
    },
    applicationrelationship: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'source' },
            { key: 'destination' },
            { key: 'type' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    cluster: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            //   { key: 'status', transform: getClusterStatusIcon },
            { key: 'nodes' },
            { key: 'klusterletVersion' },
            { key: 'kubernetesVersion', msgKey: 'k8sVersion' },
            { key: 'cpu' },
            { key: 'storage' },
            { key: 'memory' },
        ],
        actions: [
            'table.actions.cluster.edit.labels',
        ]
    },
    configmap: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    cronjob: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'schedule' },
            { key: 'suspend' },
            { key: 'active' },
            { key: 'lastSchedule', transform: function (item) { return resource_helper_1.getAge(item, null, 'lastSchedule'); } },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    daemonset: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'desired' },
            { key: 'current' },
            { key: 'ready' },
            { key: 'updated' },
            { key: 'available' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    deployable: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'chartUrl' },
            { key: 'dependencies' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    deployment: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'desired' },
            { key: 'current' },
            { key: 'ready' },
            { key: 'available' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    genericresource: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    job: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'completions' },
            { key: 'parallelism' },
            { key: 'successful' },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    namespace: {
        columns: [
            { key: 'name' },
            { key: 'cluster' },
            { key: 'status' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    node: {
        columns: [
            { key: 'name' },
            { key: 'cluster' },
            { key: 'role' },
            { key: 'architecture' },
            { key: 'osImage' },
            { key: 'cpu' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    persistentvolume: {
        columns: [
            { key: 'name' },
            { key: 'cluster' },
            { key: 'type' },
            { key: 'status' },
            { key: 'capacity' },
            { key: 'accessModes', msgKey: 'accessMode' },
            { key: 'claimRef', msgKey: 'claim' },
            { key: 'reclaimPolicy' },
            { key: 'path' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    persistentvolumeclaim: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'status' },
            { key: 'persistentVolume', msgKey: 'persistent.volume' },
            { key: 'requests' },
            { key: 'accessModes', msgKey: 'accessMode' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    placementbinding: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'subjects' },
            { key: 'placementpolicy' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    placementpolicy: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'replicas' },
            { key: 'decisions' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    pod: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'status' },
            { key: 'restarts' },
            { key: 'hostIP' },
            { key: 'podIP' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: [
            'table.actions.pod.logs',
            'table.actions.remove',
        ]
    },
    policy: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            //   { key: 'compliant', transform: getPolicyStatusIcon },
            { key: 'cluster' },
            { key: 'remediationAction' },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    release: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'status' },
            { key: 'chartName' },
            { key: 'chartVersion' },
            { key: 'updated', transform: function (item) { return resource_helper_1.getAge(item, null, 'updated'); } },
        ],
        actions: [
            'table.actions.remove',
        ]
    },
    replicaset: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'desired' },
            { key: 'current' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    savedSearches: {
        columns: [
            { key: 'name' },
            { key: 'description' },
            { key: 'searchText' },
            { key: 'count' },
        ],
        actions: [
            'table.actions.remove',
        ]
    },
    secret: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'type' },
            { key: 'created', transform: resource_helper_1.getAge },
        ]
    },
    service: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    },
    statefulset: {
        columns: [
            { key: 'name' },
            { key: 'namespace' },
            { key: 'cluster' },
            { key: 'desired' },
            { key: 'current' },
            { key: 'created', transform: resource_helper_1.getAge },
        ],
        actions: []
    }
};
