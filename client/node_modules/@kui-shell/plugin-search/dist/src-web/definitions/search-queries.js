"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
exports.__esModule = true;
exports.GET_SEARCH_SCHEMA = {
    operationName: 'searchSchema',
    variables: {},
    query: 'query searchSchema {\n  searchSchema\n  }'
};
exports.GET_SEARCH_COMPLETE = function (property, query) {
    return {
        operationName: 'searchComplete',
        variables: {
            property: property,
            query: query
        },
        query: 'query searchComplete($property: String!, $query: SearchInput) {\n  searchComplete(property: $property, query: $query)\n }'
    };
};
exports.SEARCH_RELATED_QUERY = function (keywords, filters) {
    return {
        operationName: 'searchResult',
        variables: {
            input: [{ keywords: keywords, filters: filters }]
        },
        query: 'query searchResult($input: [SearchInput]) {\n  searchResult: search(input: $input) {\n    items\n    related {\n      kind\n      items\n      __typename\n    }\n    __typename\n  }\n}\n'
    };
};
exports.SEARCH_QUERY = function (keywords, filters) {
    return {
        operationName: 'searchResult',
        variables: {
            input: [{ keywords: keywords, filters: filters }]
        },
        query: 'query searchResult($input: [SearchInput]) {\n  searchResult: search(input: $input) {\n    items\n    __typename\n  }\n}\n'
    };
};
exports.SEARCH_QUERY_COUNT = function (input) {
    return {
        operationName: 'searchResult',
        variables: {
            input: input
        },
        query: 'query searchResult($input: [SearchInput]) {\n  searchResult: search(input: $input) {\n    count\n    __typename\n  }\n}\n'
    };
};
exports.SEARCH_ACM_QUERY = function (record) {
    return {
        operationName: 'getResource',
        variables: {
            kind: record.kind,
            name: record.name,
            namespace: record.namespace,
            cluster: record.cluster,
            selfLink: record.selfLink
        },
        query: 'query getResource($kind: String, $name: String, $namespace: String, $cluster: String, $selfLink: String) {\n  getResource(kind: $kind, name: $name, namespace: $namespace, cluster: $cluster, selfLink: $selfLink)\n}\n'
    };
};
exports.SAVED_SEARCH_QUERY = {
    operationName: 'savedSearches',
    variables: {},
    query: 'query savedSearches {\n  items: savedSearches {\n    id\n    name\n    description\n    searchText\n    __typename\n  }\n}\n'
};
exports.SAVED_QUERY = function (data) {
    return {
        operationName: 'saveQuery',
        variables: {
            resource: {
                name: data.name,
                description: data.description,
                searchText: data.searchText,
                id: data.id
            }
        },
        query: 'mutation saveQuery($resource: JSON!) {\n  saveQuery(resource: $resource)\n}\n'
    };
};
exports.SAVE_SEARCH = function (search) {
    return {
        operationName: 'saveSearch',
        variables: {
            resource: {
                id: search.id,
                name: search.name,
                description: search.description,
                searchText: search.searchText
            }
        },
        query: 'mutation saveSearch($resource: JSON!) {\n  saveSearch(resource: $resource)\n}\n'
    };
};
exports.UPDATE_RESOURCE = function (resource) {
    return {
        operationName: 'updateResource',
        variables: {
            body: resource,
            cluster: resource.cluster,
            kind: resource.kind,
            name: resource.name,
            namespace: resource.namespace,
            selfLink: resource.selfLink
        },
        query: 'query updateResource($selfLink: String, $namespace: String, $kind: String, $name: String, $body: JSON, $cluster: String) {\n  updateResource(selfLink: $selfLink, namespace: $namespace, kind: $kind, name: $name, body: $body, cluster: $cluster)\n}\n'
    };
};
exports.RESOURCE_LOGS = function (record) {
    return {
        operationName: 'getLogs',
        variables: {
            containerName: record.container,
            podName: record.name,
            podNamespace: record.namespace,
            clusterName: record.cluster
        },
        query: 'query getLogs($containerName: String!, $podName: String!, $podNamespace: String!, $clusterName: String!) {\n  logs(containerName: $containerName, podName: $podName, podNamespace: $podNamespace, clusterName: $clusterName)\n}\n'
    };
};
exports.DELETE_QUERY = function (name) {
    return {
        operationName: 'deleteSearch',
        query: 'mutation deleteSearch($resource: JSON!) {\n deleteSearch(resource: $resource)\n}\n',
        variables: {
            resource: {
                name: name
            }
        }
    };
};
exports.DELETE_RESOURCE = function (name, namespace, kind, cluster, selfLink) {
    return {
        operationName: 'deleteResource',
        query: 'mutation deleteResource($selfLink: String, $name: String, $namespace: String, $cluster: String, $kind: String, $childResources: JSON) {\n  deleteResource(selfLink: $selfLink, name: $name, namespace: $namespace, cluster: $cluster, kind: $kind, childResources: $childResources)\n}\n',
        variables: {
            // TODO - Not sure if child resources are handled at all..
            // childResources,
            name: name,
            namespace: namespace,
            kind: kind,
            cluster: cluster,
            selfLink: selfLink
        }
    };
};
