import * as path from 'path';
import { inBrowser } from '@kui-shell/core';
import languages from '../language-scan';
import defaultMonacoOptions from './defaults';
let amdRequire;
let initDone;
function uriFromPath(_path) {
    let pathName = path.resolve(_path).replace(/\\/g, '/');
    if (pathName.length > 0 && pathName.charAt(0) !== '/') {
        pathName = '/' + pathName;
    }
    return encodeURI('file://' + pathName);
}
export default (editorWrapper, options) => {
    const nodeRequire = global['require'];
    let editor;
    const ready = () => new Promise(resolve => {
        const iter = () => {
            if (typeof AMDLoader === 'undefined') {
                setTimeout(iter, 20);
            }
            else {
                if (!amdRequire) {
                    amdRequire = global['require'];
                    global['require'] = nodeRequire;
                    if (!inBrowser()) {
                        const monacoRoot = path.dirname(require.resolve('monaco-editor/package.json'));
                        amdRequire.config({
                            baseUrl: uriFromPath(path.join(monacoRoot, 'min'))
                        });
                    }
                    self['module'] = undefined;
                }
                if (editor) {
                    return resolve(editor);
                }
                const initEditor = () => {
                    if (!initDone) {
                        global['monaco'].languages.typescript.javascriptDefaults.setCompilerOptions({
                            noLib: true,
                            allowNonTsExtensions: true
                        });
                        languages(global['monaco'].languages).forEach(({ language, provider }) => {
                            global['monaco'].languages.registerCompletionItemProvider(language, provider);
                        });
                        global['define'] = undefined;
                        initDone = true;
                    }
                    editor = global['monaco'].editor.create(editorWrapper, Object.assign(defaultMonacoOptions(options), options));
                    resolve(editor);
                };
                amdRequire(['vs/editor/editor.main'], initEditor);
            }
        };
        iter();
    });
    return ready();
};
//# sourceMappingURL=amd.js.map