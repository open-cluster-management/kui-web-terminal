import { Common } from '@kui-shell/test';
import { kubectl, createNS, waitTillNone } from '@kui-shell/plugin-kubeui/tests/lib/k8s/utils';
import { dirname } from 'path';
const ROOT = dirname(require.resolve('@kui-shell/plugin-kubeui/tests/package.json'));
const doHeadless = (ctx, impl) => {
    before(Common.before(ctx, { noApp: true }));
    const ns = createNS();
    it('should respond with please specify a file', () => {
        return impl
            .command('kubectl status --all')
            .then(impl.expectError(1, 'Please specify a file'))
            .catch(Common.oops(ctx));
    });
    it(`should create namespace ${ns} via kubectl`, () => {
        return impl
            .command(`kubectl create namespace ${ns}`, ctx.app)
            .then(impl.expectOK(ns))
            .catch(Common.oops(ctx));
    });
    it('should create sample pod from local file', () => {
        return impl
            .command(`kubectl create -f ${ROOT}/data/k8s/headless/pod.yaml -n ${ns}`, ctx.app)
            .then(impl.expectOK('nginx'))
            .catch(Common.oops(ctx));
    });
    const kubeAlternatives = ['kubectl', 'k'];
    const verbAlternatives = ['status'];
    const entityAlternatives = [`pods -n ${ns}`];
    kubeAlternatives.forEach(kubectl => {
        verbAlternatives.forEach(verb => {
            entityAlternatives.forEach(entity => {
                const cmd = `${kubectl} ${verb} ${entity}`;
                it(`should list the new pod via the "${cmd}"`, () => {
                    return impl
                        .command(cmd, ctx.app)
                        .then(impl.expectOK('nginx'))
                        .catch(Common.oops(ctx));
                });
            });
        });
    });
    it('should delete the new pod by yaml', () => {
        return impl
            .command(`kubectl delete -f ${ROOT}/data/k8s/headless/pod.yaml  -n ${ns}`, ctx.app)
            .then(impl.expectOK('pod "nginx" deleted'))
            .then(() => waitTillNone('pods', impl)(ctx.app))
            .catch(Common.oops(ctx));
    });
    it('should NOT list the new pod via the status command', () => {
        return impl
            .command(`k status pods -n ${ns}`, ctx.app)
            .then(impl.expectJustOK())
            .catch(Common.oops(ctx));
    });
    if (!process.env.TRAVIS_JOB_ID) {
        it(`should delete the namespace ${ns} `, () => {
            return impl
                .command(`kubectl delete namespace ${ns}`, ctx.app)
                .then(impl.expectOK(`namespace "${ns}" deleted`))
                .catch(Common.oops(ctx));
        });
    }
};
Common.localDescribe('k status kubectl kui headless mode', function () {
    doHeadless(this, kubectl);
});
//# sourceMappingURL=status.js.map