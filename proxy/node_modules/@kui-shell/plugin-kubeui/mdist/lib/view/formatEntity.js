var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Debug from 'debug';
import { eventBus } from '@kui-shell/core';
import { toOpenWhiskFQN } from '../util/util';
import { FinalState, watchStatus, rendering as stateRendering } from '../model/states';
const debug = Debug('k8s/util/formatEntity');
export const formatContextAttr = (context, extraCSS) => {
    return [
        {
            key: 'context',
            value: context,
            outerCSS: `${extraCSS ? extraCSS + ' ' : ''}entity-name-group entity-name-group-narrow hide-with-sidecar`
        }
    ];
};
export const formatEntity = (tab, parsedOptions, context) => (kubeEntity) => __awaiter(void 0, void 0, void 0, function* () {
    if (!kubeEntity.metadata) {
        return kubeEntity;
    }
    const finalState = parsedOptions['final-state'] || FinalState.NotPendingLike;
    const { apiVersion, kind, metadata: { name, namespace, labels, annotations = {} } } = kubeEntity;
    const { type, actionName, packageName, fqn } = toOpenWhiskFQN(kubeEntity);
    const { cssForState } = stateRendering;
    const title = annotations && annotations['kui.tools/title'];
    const targetNamespace = annotations && annotations['kui.tools/targetNamespace'];
    const masqueradeKind = annotations && annotations['kui.tools/category'];
    const kindForDisplay = masqueradeKind || kind;
    const kindAttr = [{ key: 'kind', value: kindForDisplay, outerCSS: 'entity-kind' }];
    const contextAttr = parsedOptions.multi || !context ? [] : formatContextAttr(context);
    const watch = {
        apiVersion,
        kind,
        name,
        namespace,
        type,
        fqn,
        context,
        labels
    };
    const eventType = '/kubectl/state/expect';
    const listener = ({ watch: other, finalState: otherFinalState }) => {
        if (watch.kind === other.kind &&
            watch.name === other.name &&
            watch.context === other.context &&
            finalState !== otherFinalState) {
            debug('conflicting final states', watch, finalState, otherFinalState);
            eventBus.removeListener(eventType, listener);
        }
    };
    eventBus.on(eventType, listener);
    eventBus.emit('/kubectl/state/expect', { watch, finalState });
    const namespaceAttrs = !watch.kind || watch.kind.match(/(ns|Namespace)/i)
        ? []
        : [
            {
                key: 'namespace',
                value: targetNamespace || namespace,
                outerCSS: 'pretty-narrow hide-with-sidecar'
            }
        ];
    const status = yield watchStatus(tab, watch, finalState);
    const statusAttrs = parsedOptions['no-status']
        ? []
        : [
            {
                key: 'STATUS',
                value: status.value,
                placeholderValue: true,
                tag: 'badge',
                outerCSS: status.outerCSS,
                css: cssForState(status.value)
            },
            {
                key: 'message',
                value: status.others && status.others.find(other => other.key === 'message')
                    ? status.others.find(other => other.key === 'message').value
                    : '',
                css: 'somewhat-smaller-text slightly-deemphasize',
                outerCSS: 'hide-with-sidecar not-too-wide min-width-date-like'
            }
        ];
    const attributes = kindAttr
        .concat(contextAttr)
        .concat(namespaceAttrs)
        .concat(statusAttrs);
    return Object.assign({}, kubeEntity, {
        type: 'status',
        prettyType: kindForDisplay,
        name: title || actionName || fqn,
        packageName,
        noSort: true,
        onclick: parsedOptions.onclickFn ? parsedOptions.onclickFn(kubeEntity) : status.onclick ? status.onclick : false,
        done: status.done,
        attributes
    });
});
//# sourceMappingURL=formatEntity.js.map