import * as _ExecOptions from '../models/execOptions';
import * as _Commands from '../models/command';
import * as Plugins from '../models/plugin';
import * as Entity from '../models/entity';
import * as Sidecar from '../webapp/views/sidecar';
import * as Context from '../commands/context';
export declare namespace Commands {
    export import Arguments = _Commands.EvaluatorArgs;
    export import KResponse = _Commands.KResponse;
    export import SimpleEntity = Entity.SimpleEntity;
    export import CustomResponse = Sidecar.CustomSpec;
    export import MixedResponse = Entity.MixedResponse;
    export import ResourceModification = Entity.ResourceModification;
    export import DefaultExecOptions = _ExecOptions.DefaultExecOptions;
    export import ExecOptions = _ExecOptions.ExecOptions;
    export import withLanguage = _ExecOptions.withLanguage;
    export import getCurrentContext = Context.getCurrentContext;
    export import ExecType = _Commands.ExecType;
    export import Registrar = _Commands.CommandRegistrar;
    export import ParsedOptions = _Commands.ParsedOptions;
    export import CommandHandler = _Commands.CommandHandler;
    export import Evaluator = _Commands.Evaluator;
    export import isCommandHandlerWithEvents = _Commands.isCommandHandlerWithEvents;
    export import Event = _Commands.Event;
    export import CommandLine = _Commands.CommandLine;
    export import PluginRegistration = Plugins.PluginRegistration;
    export import PreloadRegistration = Plugins.PreloadRegistration;
    const unparse: (options: ParsedOptions) => string;
}
export { PluginRegistration, PreloadRegistration } from '../models/plugin';
export { CommandOptions, CommandLine, Evaluator, ExecType, KResponse, ParsedOptions, EvaluatorArgs as Arguments, Event, CommandRegistrar as Registrar } from '../models/command';
export { MixedResponse, RawResponse, ResourceModification } from '../models/entity';
export { isCommandHandlerWithEvents } from '../models/command';
export { withLanguage } from '../models/execOptions';
export { _ExecOptions as ExecOptions };
export default Commands;
