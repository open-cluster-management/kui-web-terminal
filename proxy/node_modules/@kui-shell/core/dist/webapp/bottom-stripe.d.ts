import { Tab } from './cli';
import { Table } from './models/table';
import { CustomSpec } from './views/sidecar-core';
import { MetadataBearing } from '../models/entity';
import { Mode, Button } from '../models/mmr/types';
export declare type SelectionController = {
    on: (evt: 'change', cb: (selected: boolean) => void) => void;
};
export declare type SidecarMode<T extends MetadataBearing = MetadataBearing> = Mode<T> | Button<T>;
export declare function isSidecarMode(entity: string | HTMLElement | Table | SidecarMode): entity is SidecarMode;
interface BottomStripOptions {
    show?: string;
    preserveBackButton?: boolean;
    modelOnly?: boolean;
}
export declare const rawCSS: {
    buttons: string;
};
export declare const css: {
    buttons: (tab: Tab) => HTMLElement;
    backContainer: (tab: Tab) => HTMLElement;
    backButton: (tab: Tab) => HTMLElement;
    button: string;
    tab: string[];
    buttonAction: string;
    buttonActingAsButton: string;
    buttonActingAsRadioButton: string;
    modeContainer: (tab: Tab) => HTMLElement;
    bottomContainer: (tab: Tab) => HTMLElement;
    active: string;
    selected: string;
    hidden: string;
};
export declare const addModeButton: (tab: Tab, mode: SidecarMode<MetadataBearing<void>>, entity: Record<string, any>) => HTMLLIElement | HTMLAnchorElement;
export declare const addModeButtons: (tab: Tab, modesUnsorted: SidecarMode<MetadataBearing<void>>[], entity: MetadataBearing<void> | CustomSpec<void>, options?: BottomStripOptions) => SidecarMode<MetadataBearing<void>>[];
export {};
