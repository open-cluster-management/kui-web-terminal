/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import Debug from 'debug';
const debug = Debug('plugins/bash-like/preload');
debug('loading');
import { inBrowser } from '@kui-shell/core';
import { preload as registerCatchAll } from './lib/cmds/catchall';
export const registerCapability = (registrar) => __awaiter(void 0, void 0, void 0, function* () {
    if (inBrowser()) {
        yield import('./pty/session').then(({ init }) => init(registrar));
    }
    else {
        try {
            const prefetchShellState = (yield import('./pty/prefetch')).default;
            yield prefetchShellState();
            debug('done with state prefetch');
        }
        catch (err) {
            console.error('error in state prefetch', err);
        }
    }
});
/**
 * This is the module
 *
 */
export default (registrar) => __awaiter(void 0, void 0, void 0, function* () {
    return registerCatchAll(registrar);
});
debug('finished loading');
//# sourceMappingURL=preload.js.map