"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isLiteral = isLiteral;
exports.isConditional = isConditional;
exports.isWhile = isWhile;
exports.isDoWhile = isDoWhile;
exports.isTry = isTry;
exports.isAction = isAction;
exports.isFunction = isFunction;
exports.isFinally = isFinally;
exports.isOn = isOn;
exports.isRetryOrRepeat = isRetryOrRepeat;
exports.isLet = isLet;
exports.isSequence = isSequence;
exports.isRetain = isRetain;
exports.isComponentBearing = isComponentBearing;
exports.isComponentArrayBearing = isComponentArrayBearing;
exports.isParallelLike = isParallelLike;
exports.isMapLike = isMapLike;

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function isLiteral(ast) {
  return ast.type === 'literal' || ast.type === 'value';
}

function isConditional(ast) {
  return ast.type === 'if';
}

function isWhile(ast) {
  return ast.type === 'while' || ast.type === 'while_nosave';
}

function isDoWhile(ast) {
  return ast.type === 'dowhile' || ast.type === 'dowhile_nosave';
}

function isTry(ast) {
  return ast.type === 'try';
}

function isAction(ast) {
  return ast.type === 'action';
}

function isFunction(ast) {
  return ast.type === 'function';
}

function isFinally(ast) {
  return ast.type === 'finally';
}

function isOn(ast) {
  return ast.type === 'on';
}

function isRetryOrRepeat(ast) {
  return ast.type === 'retry' || ast.type === 'repeat';
}

function isLet(ast) {
  return ast.type === 'let';
}

function isSequence(ast) {
  return ast.type === 'sequence' || ast.type === 'seq';
}

function isRetain(ast) {
  return ast.type === 'retain';
}

function isComponentBearing(ast) {
  const cb = ast;
  return typeof cb.components === 'object';
}

function isComponentArrayBearing(ast) {
  const cb = ast;
  return Array.isArray(cb.components) && cb.components.length > 0;
}

function isParallelLike(ast) {
  return ast.type === 'parallel' || ast.type === 'par' || ast.type === 'map' || ast.type === 'forall';
}

function isMapLike(ast) {
  return ast.type === 'map' || ast.type === 'forall';
}