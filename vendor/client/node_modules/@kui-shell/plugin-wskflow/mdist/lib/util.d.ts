import { Tab, Mode } from '@kui-shell/core';
/**
 * Return some line-oriented statistics about the given code.
 *
 * @param code some source code
 * @return { nLines, maxLineLength } for the given code
 *
 */
interface TextualProperties {
    nLines: number;
    maxLineLength: number;
}
export declare const textualPropertiesOfCode: (code: string) => TextualProperties;
/**
 * Render the wskflow visualization for the given fsm.
 *
 * `container` is optional; wskflow will render in the default way in
 * the sidecar if we don't pass a container in
 *
 * @return { view, controller } where controller is the API exported by graph2doms
 */
export declare const wskflow: (tab: Tab, visualize: any, { ast, viewOptions, container }: {
    ast: any;
    viewOptions: any;
    container: any;
}) => Promise<any>;
/**
 * Zoom to fit buttons
 *
 * @param controller an output of graph2doms()
 * @param visibleWhenShowing only show the zoom buttons when the given mode is active
 *
 */
export declare const zoomToFitButtons: (controller: any, { visibleWhenShowing }?: {
    visibleWhenShowing?: string;
}) => Mode<import("@kui-shell/core").ResourceWithMetadata<void>>[];
export {};
