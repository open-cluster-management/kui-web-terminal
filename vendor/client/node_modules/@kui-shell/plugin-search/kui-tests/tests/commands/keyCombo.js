/*******************************************************************************
 * Licensed Materials - Property of IBM
 * (c) Copyright IBM Corporation 2019. All Rights Reserved.
 *
 * Note to U.S. Government Users Restricted Rights:
 * Use, duplication or disclosure restricted by GSA ADP Schedule
 * Contract with IBM Corp.
 *******************************************************************************/

'use strict'

const util = require('util')
const events = require('events')

function keyCombo () {
  events.EventEmitter.call(this)
}

util.inherits(keyCombo, events.EventEmitter)

/*
  selector - the css selector to target
  type = keypress, keydown, or keyup
  config = pass an object that has key/value pairs that match the structure of KeyboardEvent API
*/

keyCombo.prototype.command = function (selector, type, config) {
  this.client.api.execute(function (selector, type, config) {
    const keys = new KeyboardEvent(type, { bubbles: true, cancelable: true, ...config });
    const element = document.querySelector(selector);
    element.dispatchEvent(keys);
  }, [selector, type, config], () => this.emit('complete'))

  return this
}

module.exports = keyCombo
