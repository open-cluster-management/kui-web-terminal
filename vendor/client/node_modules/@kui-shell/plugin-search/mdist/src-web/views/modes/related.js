"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
exports.__esModule = true;
var lodash = require("lodash");
var React = require("react");
var ReactDOM = require("react-dom");
var carbon_components_react_1 = require("carbon-components-react");
var core_1 = require("@kui-shell/core");
var i18n_1 = require("../../util/i18n");
var handleEvent = function (resource, cluster, event) {
    if ((event && event.which === 13) || !event) {
        var command_1 = "search kind:" + lodash.get(resource, 'kind', '') + " ";
        if (cluster && lodash.get(resource, 'kind', '') !== 'cluster') { // Include cluster name when returning the related data.
            command_1 += "cluster:" + cluster + " name:";
        }
        else {
            command_1 += 'name:';
        }
        lodash.get(resource, 'items', '').forEach(function (item) {
            command_1 += item.name + ",";
        });
        core_1.getCurrentTab().REPL.pexec(command_1.substring(0, command_1.length - 1));
    }
};
/**
 * Renders a structured list of related resources for the selected resource's sidecar.
 * @param related
 */
exports.buildRelated = function (data, type) {
    var node = document.createElement('div');
    node.classList.add('scrollable');
    node.classList.add(type !== 'query' ? 'bx--structured-list--summary' : 'bx--tile-related');
    var cluster = lodash.get(data, 'items[0].cluster', '');
    var relatedResource = type !== 'query'
        ? function () {
            return (React.createElement(carbon_components_react_1.StructuredListWrapper, null,
                React.createElement(carbon_components_react_1.StructuredListBody, null, data.map(function (row) { return (React.createElement(carbon_components_react_1.StructuredListRow, { key: "" + row.kind, className: 'bx--structured-list-rowclick' },
                    React.createElement(carbon_components_react_1.StructuredListCell, { tabIndex: 0, onKeyPress: function (e) { return handleEvent(row, cluster, e); }, onClick: function () { return handleEvent(row, cluster); } },
                        React.createElement("span", { className: 'bx--structured-list-td-related-header' }, "" + row.items.length),
                        React.createElement("br", null),
                        React.createElement("span", { className: 'bx--structured-list-td-body' }, "Related " + row.kind)))); }))));
        }
        : function () {
            return (data.map(function (row) { return (React.createElement(carbon_components_react_1.ClickableTile, { tabIndex: 0, onKeyPress: function (e) { return handleEvent(row, cluster, e); }, key: row.kind, handleClick: function () { return handleEvent(row, cluster); } },
                React.createElement("div", { className: 'bx--tile-container' },
                    React.createElement("span", { className: 'bx--structured-list-td-related-header' }, "" + row.items.length),
                    React.createElement("br", null),
                    React.createElement("span", { className: 'bx--structured-list-td-body' }, "Related " + row.kind)))); }));
        };
    ReactDOM.render(React.createElement(relatedResource), node);
    return node;
};
/**
 * Renders a related tab for the selected resource's || search query's sidecar.
 * @param resource
 * @param type
 */
exports.relatedTab = function (data, type) {
    var badges = [];
    // This will allow the sidecar balloon element to display the resources name.
    var balloon = lodash.get(data, 'items[0].name', '').split(/(-[0-9])/);
    badges.push(balloon[0]);
    return {
        mode: 'related',
        label: i18n_1["default"]('search.label.related'),
        order: 9999,
        content: exports.buildRelated(data.related, type)
    };
};
