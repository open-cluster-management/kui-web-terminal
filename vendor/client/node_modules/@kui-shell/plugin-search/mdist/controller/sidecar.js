var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { convertStringToQuery } from '../util/search-helper';
import * as lodash from 'lodash';
import HTTPClient from './HTTPClient';
import { SEARCH_ACM_QUERY, SEARCH_RELATED_QUERY } from '../definitions/search-queries';
import { summaryTab } from '../views/modes/summary';
import { yamlTab } from '../views/modes/yaml';
import { relatedTab } from '../views/modes/related';
import { logTab } from '../views/modes/logging';
import strings from '../util/i18n';
import { isSearchAvailable, renderSearchAvailable } from './search';
import { setPluginState, getPluginState } from '../pluginState';
export const buildSidecar = (type, data, resource) => {
    const modes = [];
    const kind = lodash.get(data, 'items[0].kind', '');
    if (type !== 'query') {
        modes.push(summaryTab(data.items[0]));
        if (kind === 'pod') {
            modes.push(logTab(data.items[0]));
        }
        if (!lodash.get(resource, 'errors', '') && lodash.get(data, 'getResource', '') === '') {
            modes.push(yamlTab(resource));
        }
    }
    if (lodash.get(data, 'related', '').length > 0) {
        modes.push(relatedTab(data, type));
    }
    return {
        kind,
        metadata: {
            name: type !== 'query' ? lodash.get(data, 'items[0].name', '') : strings('search.label.query', [kind]),
            namespace: type !== 'query' ? lodash.get(data, 'items[0].namespace', '') : null,
        },
        modes,
    };
};
export const getSidecar = (args) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve) => {
        const { command } = args;
        const userQuery = convertStringToQuery(command);
        if (args.argv.length === 2) {
            resolve(`ERROR: Received wrong number of parameters.\nUSAGE: ${command} kind:<keyword> name:<keyword>\nEXAMPLE: ${command} kind:pod name:alertmanager-main-0`);
        }
        const node = document.createElement('pre');
        node.setAttribute('class', 'oops');
        node.innerText = strings('search.no.resources.found');
        if (isSearchAvailable()) {
            HTTPClient('post', 'search', SEARCH_RELATED_QUERY(userQuery.keywords, userQuery.filters))
                .then((res) => {
                const data = lodash.get(res, 'data.searchResult[0]', '');
                if (!data || data.items.length === 0) {
                    resolve(node);
                }
                else if (args.command.includes('related:resources')) {
                    resolve(buildSidecar('query', data));
                }
                else {
                    HTTPClient('post', 'console', SEARCH_ACM_QUERY(data.items[0]))
                        .then((resp) => {
                        const resource = !resp.errors ? resp.data.getResource : resp;
                        resolve(buildSidecar('resource', data, resource));
                    })
                        .catch((err) => {
                        setPluginState('error', err);
                        resolve(renderSearchAvailable(isSearchAvailable(), getPluginState().error));
                    });
                }
            })
                .catch((err) => {
                setPluginState('error', err);
                resolve(renderSearchAvailable(isSearchAvailable(), getPluginState().error));
            });
        }
        else {
            resolve(renderSearchAvailable(isSearchAvailable()));
        }
    });
});
//# sourceMappingURL=sidecar.js.map