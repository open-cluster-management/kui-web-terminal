var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import HTTPClient from './HTTPClient';
import renderReact from '../util/renderReact';
import { convertStringToQuery } from '../util/search-helper';
import { usage } from './helpfiles/searchhelp';
import { SEARCH_RELATED_QUERY } from '../definitions/search-queries';
import { getSidecar } from './sidecar';
import strings from '../util/i18n';
import { getPluginState, setPluginState } from '../pluginState';
import Modal from '../components/Modal';
import { searchDelete } from './actionHandler';
export const renderSearchAvailable = (available, err) => {
    const node = document.createElement('div');
    node.classList.add('is-search-available');
    const status = () => {
        if (available) {
            return (React.createElement("div", null, !err
                ? React.createElement("p", null, strings('search.service.installed'))
                : React.createElement("p", null,
                    React.createElement("span", { className: 'oops' }, strings('search.service.installed.error')))));
        }
        else {
            return (React.createElement("div", null, !err
                ? React.createElement("p", null, strings('search.service.not.installed'))
                : React.createElement("p", null,
                    React.createElement("span", { className: 'oops' }, strings('search.service.unavailable.error')))));
        }
    };
    ReactDOM.render(React.createElement(status), node);
    return node;
};
export const isSearchAvailable = () => {
    return getPluginState().enabled;
};
export const doSearch = (args) => {
    const userQuery = convertStringToQuery(args.command);
    if (args.argv.length === 1 || args.command === 'search -h') {
        return usage();
    }
    else {
        return new Promise((resolve, reject) => {
            if (args.command.includes('--save') && args.argv.indexOf('--save') === args.argv.length - 1) {
                const node = document.createElement('div');
                const save = () => {
                    return (React.createElement(Modal, { item: args, modalOpen: true, onClose: false, action: 'save' }));
                };
                ReactDOM.render(React.createElement(save), node);
                resolve(node);
            }
            if (args.command.includes('search -delete')) {
                resolve(searchDelete(args));
            }
            const renderNoResults = () => {
                const node = document.createElement('pre');
                node.setAttribute('class', 'oops');
                node.innerText = strings('search.no.resources.found');
                return node;
            };
            const buildTable = (data) => {
                const node = document.createElement('div', { is: 'react-entry-point' });
                node.classList.add('search-kui-plugin');
                data.items.length > 0
                    ? renderReact(data, node, args.command)
                    : node.appendChild(renderNoResults());
                return node;
            };
            args.command !== 'search -i' && args.command !== 's -i' && isSearchAvailable()
                ? HTTPClient('post', 'search', SEARCH_RELATED_QUERY(userQuery.keywords, userQuery.filters))
                    .then((res) => {
                    resolve(buildTable(res.data.searchResult[0]));
                })
                    .catch((err) => {
                    setPluginState('error', err);
                    resolve(renderSearchAvailable(isSearchAvailable(), getPluginState().error));
                })
                : resolve(renderSearchAvailable(isSearchAvailable()));
        });
    }
};
export default (commandTree) => __awaiter(void 0, void 0, void 0, function* () {
    const searchCmd = commandTree.listen('/search', doSearch);
    commandTree.synonym('/s', doSearch, searchCmd);
    const summaryCmd = yield commandTree.listen('/search/summary', getSidecar);
    commandTree.synonym('/s/summary', getSidecar, summaryCmd);
    const relatedCmd = yield commandTree.listen('/search/related:resources', getSidecar);
    commandTree.synonym('/s/related:resources', getSidecar, relatedCmd);
});
//# sourceMappingURL=search.js.map