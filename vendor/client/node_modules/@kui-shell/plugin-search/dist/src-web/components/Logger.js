"use strict";
/* eslint-disable no-unused-expressions */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
// Hack to workaround build issues with Carbon dependencies
if (!window || !window.navigator || !window.navigator.userAgent) {
    Object.defineProperty(window, 'navigator', { value: { userAgent: 'node' }, writable: true });
    Object.defineProperty(document, 'getElementById', { value: function (val) { return document.querySelector('#' + val); }, writable: true });
}
var React = require("react");
var PropTypes = require("prop-types");
var carbon_components_react_1 = require("carbon-components-react");
var lodash = require("lodash");
var HTTPClient_1 = require("../controller/HTTPClient");
var search_queries_1 = require("../definitions/search-queries");
var i18n_1 = require("../../src-web/util/i18n");
var Logger = /** @class */ (function (_super) {
    __extends(Logger, _super);
    function Logger(props) {
        var _this = _super.call(this, props) || this;
        _this.componentDidMount = function () {
            _this.container = _this.state.selectedItem;
            _this.getLogs();
            _this.refresh = setInterval(function () { return _this.isFocused(_this.getLogs); }, 15000);
        };
        _this.componentWillUnmount = function () {
            clearInterval(_this.refresh);
        };
        _this.isFocused = function (fn) {
            // This will allow KUI to check if the sidecar tabs are being focused on. Based upon the tabindex, this will determine if the log tab will be refreshed.
            var focus = document.getElementsByClassName('kui--tab-navigatable kui--notab-when-sidecar-hidden bx--tabs__nav-link');
            document.querySelector('.logs-container__content') && focus[0]['tabIndex'] >= 0
                ? fn()
                : document.querySelector('.visible.sidecar-is-minimized') && document.querySelector('.logs-container__content')
                    ? null
                    : _this.componentWillUnmount();
        };
        _this.state = {
            selectedItem: lodash.get(_this.props.items, '[0]', ''),
            logs: ''
        };
        _this.handleOnChange = _this.handleOnChange.bind(_this);
        _this.getLogs = _this.getLogs.bind(_this);
        _this.isFocused = _this.isFocused.bind(_this);
        return _this;
    }
    Logger.prototype.handleOnChange = function (event) {
        var _this = this;
        this.container = event.selectedItem;
        this.setState({ logs: '' });
        this.getLogs();
        clearInterval(this.refresh);
        this.refresh = setInterval(function () { return _this.isFocused(_this.getLogs); }, 15000);
    };
    Logger.prototype.getLogs = function () {
        var _this = this;
        if (!document.hidden) {
            var node = document.createElement('div');
            node.classList.add('scrollable');
            node.classList.add('bx--structured-list--summary');
            var record = {
                cluster: this.props.data.cluster,
                container: this.container,
                name: this.props.data.name,
                namespace: this.props.data.namespace
            };
            HTTPClient_1["default"]('post', 'console', search_queries_1.RESOURCE_LOGS(record))
                .then(function (res) {
                _this.setState({
                    selectedItem: _this.container,
                    logs: lodash.get(res, 'data.logs', '') !== null ? res.data.logs : i18n_1["default"]('search.notfound')
                });
            });
        }
    };
    Logger.prototype.render = function () {
        return (React.createElement(React.Fragment, null,
            React.createElement(carbon_components_react_1.Dropdown, { id: 'resource-container-dropdown', label: lodash.get(this.props.items, '[0]', ''), items: this.props.items, onChange: this.handleOnChange }),
            !this.state.logs
                ? React.createElement("div", { className: 'loading-container' },
                    React.createElement(carbon_components_react_1.Loading, { withOverlay: false, className: 'resource-load' }))
                : React.createElement("div", { className: 'logs-container__content' },
                    React.createElement("pre", null, this.state.logs))));
    };
    Logger.propTypes = {
        data: PropTypes.any,
        items: PropTypes.any
    };
    return Logger;
}(React.PureComponent));
exports["default"] = Logger;
