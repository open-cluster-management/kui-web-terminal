"use strict";
/*******************************************************************************
* Licensed Materials - Property of IBM
* (c) Copyright IBM Corporation 2019. All Rights Reserved.
*
* Note to U.S. Government Users Restricted Rights:
* Use, duplication or disclosure restricted by GSA ADP Schedule
* Contract with IBM Corp.
*******************************************************************************/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports["default"] = (function (key, args) {
    var defaultStrings = require("@kui-shell/plugin-search/i18n/en-US.json");
    var locale = process.env.LOCALE || (typeof navigator !== 'undefined' && navigator.language);
    var i18n = function (locale) {
        try {
            return (locale && require("@kui-shell/plugin-search/i18n/" + locale + ".json")) || defaultStrings;
        }
        catch (err) {
            try {
                return ((locale && require("@kui-shell/plugin-search/i18n/" + locale.replace(/-.*$/, '') + ".json")) || defaultStrings);
            }
            catch (err) {
                console.error('Could not find translation for given locale', locale);
                return defaultStrings;
            }
        }
    };
    // Start with the default strings then replace with the locale strings. So if a
    // string isn't defined for a specific locale, we use the default (English) string.
    var _strings = __assign(__assign({}, defaultStrings), i18n(locale));
    var string = _strings[key];
    if (string && args) {
        args.forEach(function (arg, idx) {
            string = string.replace("{" + idx + "}", arg);
        });
    }
    return string || defaultStrings[key] || key;
});
