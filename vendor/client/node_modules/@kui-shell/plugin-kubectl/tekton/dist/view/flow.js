"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _path = require("path");

var _core = require("@kui-shell/core");

var _pluginKubectl = require("@kui-shell/plugin-kubectl");

var _run = _interopRequireDefault(require("../model/modes/run"));

var _flow = _interopRequireDefault(require("../model/modes/flow"));

var _tekton2graph = _interopRequireDefault(require("../lib/tekton2graph"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const debug = (0, _debug.default)('plugins/tekton/view/flow');
/**
 * Format a repl response
 *
 */

var _default = (tab, jsons, run, raw = '', // safeDump(jsons),
filepath) => __awaiter(void 0, void 0, void 0, function* () {
  const [graph] = yield Promise.all([(0, _tekton2graph.default)(jsons, filepath, run) // generate the graph model
  ]);
  debug('graph', graph);
  const {
    graph2doms,
    zoomToFitButtons
  } = yield Promise.resolve().then(() => require('@kui-shell/plugin-wskflow'));
  const content = document.createElement('div');
  content.classList.add('padding-content');
  content.style.flex = '1';
  content.style.display = 'flex';
  const {
    controller
  } = yield graph2doms(tab, graph, content, graph.runs, {
    layoutOptions: {
      'elk.separateConnectedComponents': false,
      'elk.spacing.nodeNode': 10,
      'elk.padding': '[top=10,left=7.5,bottom=10,right=7.5]',
      hierarchyHandling: 'INCLUDE_CHILDREN' // since we have hierarhical edges, i.e. that cross-cut subgraphs

    }
  });
  debug('content', content);
  const tektonModes = [_flow.default, _run.default, {
    mode: 'Raw',
    content: raw,
    contentType: 'yaml'
  }];
  const badges = ['Tekton'];

  if (!run) {
    if (jsons.find(_ => _.kind === 'PipelineRun' || _.kind === 'TaskRun')) {
      badges.push({
        title: 'Runnable',
        css: _pluginKubectl.TrafficLight.Green
      });
    } else {
      badges.push({
        title: 'Not Runnable',
        css: _pluginKubectl.TrafficLight.Yellow
      });
    }
  }

  const startTime = run && run.status && run.status.startTime && new Date(run.status.startTime);
  const endTime = run && run.status && run.status.completionTime && new Date(run.status.completionTime);
  const duration = startTime && endTime && endTime.getTime() - startTime.getTime();
  return {
    type: 'custom',
    isEntity: true,
    isFromFlowCommand: true,
    name: filepath ? (0, _path.basename)(filepath) : jsons[0].metadata.name,
    packageName: filepath && (0, _path.dirname)(filepath),
    prettyType: run ? 'PipelineRun' : 'Pipeline',
    duration,
    badges,
    presentation: _core.Presentation.FixedSize,
    content,
    model: jsons,
    modes: tektonModes.concat(zoomToFitButtons(controller, {
      visibleWhenShowing: _flow.default.mode
    }))
  };
});

exports.default = _default;