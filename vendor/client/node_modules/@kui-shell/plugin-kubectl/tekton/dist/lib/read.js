"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchTask = exports.read = exports.parse = void 0;

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const debug = (0, _debug.default)('plugins/tekton/lib/read');
const knownKinds = /PipelineResource|Pipeline|Task/;
/**
 * Parse a resource spec
 *
 */

const parse = raw => __awaiter(void 0, void 0, void 0, function* () {
  const {
    safeLoadAll
  } = yield Promise.resolve().then(() => require('js-yaml'));
  return safeLoadAll(yield raw).filter(_ => knownKinds.test(_.kind));
});
/**
 * Read in a resource spec from a path
 *
 */


exports.parse = parse;

const read = (tab, filepath) => __awaiter(void 0, void 0, void 0, function* () {
  const stats = (yield tab.REPL.rexec(`fstat ${tab.REPL.encodeComponent(filepath)} --with-data`)).content;
  return stats.data;
});
/**
 * Fetch the Pipeline and Task models
 *
 */


exports.read = read;

const fetchTask = (tab, pipelineName, taskName, filepath) => __awaiter(void 0, void 0, void 0, function* () {
  if (filepath) {
    const model = yield parse(read(tab, filepath));
    const task = taskName ? model.find(_ => _.kind === 'Task' && _.metadata.name === taskName) : model.filter(_ => _.kind === 'Task');
    return task;
  } else if (!taskName) {
    const pipeline = yield tab.REPL.pexec(`kubectl get Pipeline ${tab.REPL.encodeComponent(pipelineName)}`).catch(err => {
      // want Pipeline.tekton.dev but that is much slower
      debug('got error fetching pipeline', err);
      return {
        spec: {
          tasks: []
        }
      };
    });
    const referencedTasks = pipeline.spec.tasks.reduce((M, _) => {
      M[_.taskRef.name] = true;
      return M;
    }, {});
    debug('referencedTasks', referencedTasks);
    return tab.REPL.qexec(`kubectl get Task`, undefined, undefined, {
      // want Task.tekton.dev but that is much sloewr
      filter: listOfTasks => listOfTasks.filter(_ => referencedTasks[_.name])
    });
  } else {
    return tab.REPL.pexec(`kubectl get Task ${tab.REPL.encodeComponent(taskName)}`); // want Task.tekton.dev but that is much slower
  }
});

exports.fetchTask = fetchTask;