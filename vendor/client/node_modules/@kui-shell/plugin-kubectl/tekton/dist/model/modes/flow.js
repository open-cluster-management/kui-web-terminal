"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@kui-shell/core");

var _pluginKubectl = require("@kui-shell/plugin-kubectl");

var _flow = _interopRequireDefault(require("../../view/flow"));

var _fetch = require("../fetch");

var _resource = require("../resource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const strings = (0, _core.i18n)('plugin-kubectl', 'tekton');
/**
 * The sidecar mode for the tekton flow visualization
 *
 */

const flowMode = {
  mode: 'flow',
  label: strings('flow'),
  content: (tab, resource) => __awaiter(void 0, void 0, void 0, function* () {
    if ((0, _pluginKubectl.isKubeResource)(resource)) {
      if ((0, _resource.isPipelineRun)(resource)) {
        const [pipeline, tasks] = yield Promise.all([(0, _fetch.getPipelineFromRef)(tab, resource), (0, _fetch.getTasks)(tab)]);
        return {
          content: (yield (0, _flow.default)(tab, [pipeline].concat(tasks), resource)).content
        };
      } else if ((0, _resource.isPipeline)(resource)) {
        // fetch any accompanying Tasks
        const tasks = yield (0, _fetch.getTasks)(tab);
        const view = yield (0, _flow.default)(tab, [resource].concat(tasks));
        return {
          content: view.content
        };
      } else {
        return {
          content: (yield (0, _flow.default)(tab, [resource])).content
        };
      }
    } else {
      // then resource is already the response we need
      return {
        content: resource.content
      };
    }
  }),
  defaultMode: true
};
var _default = flowMode;
exports.default = _default;