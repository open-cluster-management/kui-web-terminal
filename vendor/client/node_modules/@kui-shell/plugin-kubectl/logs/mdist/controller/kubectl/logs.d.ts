import { Arguments, MultiModalResponse, Registrar } from '@kui-shell/core';
import { KubeOptions, KubeItems, KubeResource, Pod } from '@kui-shell/plugin-kubectl';
interface LogOptions extends KubeOptions {
    follow: boolean;
    p: boolean;
    previous: boolean;
    tail: number;
}
export declare const doLogs: (args: Arguments<LogOptions>) => Promise<string | number | boolean | HTMLElement | Error | {
    content: string;
    contentType: "text/markdown";
} | import("@kui-shell/core").MixedResponse | import("@kui-shell/core").Table<import("@kui-shell/core").Row> | import("@kui-shell/core").NavResponse | import("@kui-shell/core/mdist/models/RadioTable").default | import("@kui-shell/core").UsageModel | import("@kui-shell/core").ResourceWithMetadata<any> | import("@kui-shell/core").RawResponse<any> | import("@kui-shell/core").ResourceWithMetadata<any>[]>;
export declare const logsFlags: import("@kui-shell/core").CommandOptions & {
    viewTransformer: (args: Arguments<KubeOptions>, response: KubeResource<import("../../../../mdist").KubeStatus, import("../../../../mdist/lib/model/resource").KubeMetadata> | KubeItems<Pod>) => Promise<MultiModalResponse<import("@kui-shell/core").ResourceWithMetadata<void>>>;
};
export declare const doExec: (args: Arguments<LogOptions>) => Promise<string | number | boolean | HTMLElement | Error | {
    content: string;
    contentType: "text/markdown";
} | import("@kui-shell/core").MixedResponse | import("@kui-shell/core").Table<import("@kui-shell/core").Row> | import("@kui-shell/core").NavResponse | import("@kui-shell/core/mdist/models/RadioTable").default | import("@kui-shell/core").UsageModel | import("@kui-shell/core").ResourceWithMetadata<any> | import("@kui-shell/core").RawResponse<any> | import("@kui-shell/core").ResourceWithMetadata<any>[]>;
export declare const execFlags: import("@kui-shell/core").CommandOptions & {
    viewTransformer: (args: Arguments<KubeOptions>, response: KubeResource<import("../../../../mdist").KubeStatus, import("../../../../mdist/lib/model/resource").KubeMetadata> | KubeItems<Pod>) => Promise<MultiModalResponse<import("@kui-shell/core").ResourceWithMetadata<void>>>;
};
declare const _default: (registrar: Registrar) => void;
export default _default;
