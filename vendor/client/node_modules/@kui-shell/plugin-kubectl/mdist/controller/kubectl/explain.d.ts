import { Arguments, Registrar } from '@kui-shell/core';
import { KubeOptions } from './options';
export declare const doExplain: (command?: string) => (args: Arguments<KubeOptions>) => Promise<string | number | boolean | HTMLElement | Error | {
    content: string;
    contentType: "text/markdown";
} | import("@kui-shell/core").MixedResponse | import("@kui-shell/core").Table<import("@kui-shell/core").Row> | import("@kui-shell/core").NavResponse | import("@kui-shell/core/mdist/models/RadioTable").default | import("@kui-shell/core").UsageModel | import("@kui-shell/core").ResourceWithMetadata<any> | import("@kui-shell/core").RawResponse<any> | import("@kui-shell/core").ResourceWithMetadata<any>[] | {
    apiVersion: string;
    kind: string;
    breadcrumbs: {
        label: string;
        command: string;
    }[];
    menus: {
        label: string;
        items: {
            mode: string;
            contentType: string;
            content: string;
        }[];
    }[];
}>;
/**
 * @param kindAsProvidedByUser e.g. pod or po
 * @return e.g. Pod
 *
 */
export declare function getKind(command: string, args: Arguments, kindAsProvidedByUser: string): Promise<string>;
declare const _default: (registrar: Registrar) => void;
export default _default;
