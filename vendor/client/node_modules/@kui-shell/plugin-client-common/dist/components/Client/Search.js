"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _core = require("@kui-shell/core");

var _carbonComponentsReact = require("carbon-components-react");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const strings = (0, _core.i18n)('plugin-client-common', 'search');

class Search extends React.PureComponent {
  constructor(props) {
    super(props);
    this.stopFindInPage(); // <-- failsafe, in case of bugs; electron seems to persist this

    this.initEvents();
    this.state = {
      isActive: false,
      result: undefined
    };
  }

  initEvents() {
    document.body.addEventListener('keydown', evt => {
      if (!evt.defaultPrevented && evt.code === 'KeyF' && (evt.ctrlKey && process.platform !== 'darwin' || evt.metaKey)) {
        if (this.state.isActive && !!this._input && document.activeElement !== this._input) {
          this.doFocus();
        } else {
          this.setState(curState => {
            const isActive = !curState.isActive;

            if (!isActive) {
              this.stopFindInPage();
            }

            return {
              isActive,
              result: undefined
            };
          });
        }
      }
    });
  }
  /** stop findInPage, and clear selections in page */


  stopFindInPage() {
    return __awaiter(this, void 0, void 0, function* () {
      return Promise.resolve().then(() => require('electron')).then(({
        remote
      }) => __awaiter(this, void 0, void 0, function* () {
        // note: with 'clearSelection', the focus of the input is very
        // odd; it is focused, but typing text does nothing until some
        // global refresh occurs. maybe this is just a bug in electron 6?
        yield remote.getCurrentWebContents().stopFindInPage('activateSelection');
      }));
    });
  }
  /* public componentDidCatch(error, errorInfo) {
    console.error('!!!!EEE', error, errorInfo)
  }  */


  onChange() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this._input) {
        if (this._input.value.length === 0) {
          yield this.stopFindInPage();
          this.setState({
            result: undefined
          });
        } else {
          const {
            remote
          } = yield Promise.resolve().then(() => require('electron'));
          remote.getCurrentWebContents().once('found-in-page', (event, result) => __awaiter(this, void 0, void 0, function* () {
            this.setState(curState => {
              if (curState.isActive) {
                this.hack();
                return {
                  result
                };
              }
            });
          }));
          remote.getCurrentWebContents().findInPage(this._input.value);
        }
      }
    });
  }
  /**
   * This bit of ugliness works around us not using a proper
   * webview to encapsulate the <input> element; without this
   * encapsulation, chrome does some funky things with
   * focus. For example, when there is no text found, the
   * input element oddly ... maintains focus but is not
   * typeable until a global refresh. Weird. This also has the
   * nice side-effect of (albeit with a small visual glitch)
   * having no yellow/red highlight text around the text
   * inside the input element.
   *
   */


  hack() {
    const v = this._input.value;
    this._input.value = '';
    this._input.value = v;

    this._input.focus();
  }

  doFocus(search) {
    if (!!search && !!search['input'] && typeof search['input'].focus === 'function') {
      if (!this._input) {
        this._input = search['input'];
      }
    }

    if (this.state.isActive && this._input) {
      this._input.focus();
    }
  }
  /** Summarize results of find, e.g. "3 of 3" */


  matchCount() {
    const {
      result
    } = this.state;

    if (result) {
      // exclude the text search itself; TODO move the input element to a webview
      const N = result.matches - 1;
      const text = N === 0 ? strings('noMatches') : N === 1 ? strings('1Match') : strings('nMatches', N); // re: id: text-search test needs this

      return React.createElement("span", {
        id: "search-found-text",
        className: "kui--search-match-count sub-text even-smaller-text nowrap"
      }, text);
    }
  }

  render() {
    if (!this.state.isActive || !(0, _core.inElectron)()) {
      this._input = undefined;
      return React.createElement(React.Fragment, null);
    } else {
      // re: id, text-search test needs this
      return React.createElement("div", {
        className: "kui--search flex-layout",
        id: "search-bar"
      }, React.createElement(_carbonComponentsReact.Search, {
        id: "search-input",
        placeHolderText: strings('placeHolderText'),
        small: true,
        labelText: "Search",
        onChange: this.onChange.bind(this),
        ref: this.doFocus.bind(this)
      }), this.matchCount());
    }
  }

}

exports.default = Search;