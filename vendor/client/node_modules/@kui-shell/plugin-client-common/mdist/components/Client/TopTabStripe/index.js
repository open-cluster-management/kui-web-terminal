/*
 * Copyright 2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as React from 'react';
import { KeyCodes, inElectron } from '@kui-shell/core';
import { Header, HeaderName, HeaderMenuButton, HeaderNavigation } from 'carbon-components-react';
import KuiContext from '../context';
import NewTabButton from './NewTabButton';
import Tab from './Tab';
import SplitTerminalButton from './SplitTerminalButton';
import '../../../../web/css/static/TopTabStripe.scss';
export default class TopTabStripe extends React.PureComponent {
    componentDidMount() {
        this.addKeyboardListeners();
    }
    /**
     * Register any keyboard event listeners
     *
     */
    addKeyboardListeners() {
        if (inElectron()) {
            // switch tabs based on keyboard events
            document.addEventListener('keydown', event => {
                if (event.metaKey && event.shiftKey) {
                    // shift-command+[]: switch to previous or next
                    const whichDir = event.key;
                    if (whichDir === '[' || whichDir === ']') {
                        const newIdx = whichDir === '[' ? this.props.activeIdx - 1 : this.props.activeIdx + 1;
                        this.props.onSwitchTab(newIdx);
                    }
                    event.stopPropagation();
                    return;
                }
                if (event.ctrlKey) {
                    // ctrl+PgUp/PgDown: switch to previous or next
                    const whichDir = event.keyCode;
                    if (whichDir === KeyCodes.PAGEUP || whichDir === KeyCodes.PAGEDOWN) {
                        const newIdx = whichDir === KeyCodes.PAGEUP ? this.props.activeIdx - 1 : this.props.activeIdx + 1;
                        this.props.onSwitchTab(newIdx);
                    }
                    event.stopPropagation();
                    return;
                }
                if (event.metaKey) {
                    // meta+number: switch to tab by index
                    const whichTabStr = event.key;
                    if (/\d/.test(whichTabStr)) {
                        event.stopPropagation();
                        const whichTabIdx = parseInt(whichTabStr, 10);
                        this.props.onSwitchTab(whichTabIdx - 1);
                    }
                }
            });
        }
    }
    /** Render tabs */
    tabs() {
        return (React.createElement(React.Fragment, null,
            React.createElement(HeaderNavigation, { "aria-label": "Tabs" }, this.props.tabs.map((tab, idx) => (React.createElement(Tab, Object.assign({}, this.props, { key: idx, idx: idx, uuid: tab.uuid, closeable: this.props.tabs.length > 1, active: idx === this.props.activeIdx, onCloseTab: (idx) => this.props.onCloseTab(idx), onSwitchTab: (idx) => this.props.onSwitchTab(idx) }))))),
            React.createElement("div", { className: "kui--top-tab-buttons" },
                React.createElement(NewTabButton, { onNewTab: () => {
                        this.props.onNewTab();
                    } }),
                React.createElement(SplitTerminalButton, null))));
    }
    /* private sidenav(args: CarbonHeaderArgs) {
      return <About expanded={args.isSideNavExpanded} />
    } */
    headerMenu(args) {
        return (React.createElement(HeaderMenuButton, { "aria-label": "Open menu", isCollapsible: true, onClick: args.onClickSideNavExpand, isActive: args.isSideNavExpanded }));
    }
    headerName() {
        return (React.createElement(KuiContext.Consumer, null, config => React.createElement(HeaderName, { prefix: "" }, config.productName || 'Kui')));
    }
    /** Buttons that appear in the top right */
    buttons() {
        if (this.props.tabs[this.props.activeIdx]) {
            const { buttons } = this.props.tabs[this.props.activeIdx];
            return (React.createElement("div", { id: "kui--custom-top-tab-stripe-button-container", "num-button": buttons.length, className: "kui--hide-in-narrower-windows" // re: kui--hide-in-narrower-windows, see https://github.com/IBM/kui/issues/4459
             }, buttons.map(_ => _.icon)));
        }
    }
    /**
     * React render handler
     *
     */
    render() {
        return (React.createElement(Header, { "aria-label": "Header", className: "kui--top-tab-stripe" },
            this.headerName(),
            this.tabs(),
            this.buttons()));
    }
}
//# sourceMappingURL=index.js.map