var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { isHeadless } from '@kui-shell/core';
import logs from './modes/logs';
import previous from './modes/previous';
import stackTrace from './modes/stack-trace';
import errorVerbose from './modes/error-verbose';
import drilldownToLogs from './modes/show-logs';
import levelBadge from './modes/level-badge';
import scopeBadge from './modes/scope-badge';
export default (registrar) => __awaiter(void 0, void 0, void 0, function* () {
    if (!isHeadless()) {
        registrar.registerModes(logs, previous, stackTrace, errorVerbose, drilldownToLogs);
        registrar.registerBadges(levelBadge, scopeBadge);
    }
});
//# sourceMappingURL=preload.js.map