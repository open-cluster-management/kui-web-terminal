/*
 * Copyright 2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { i18n } from '@kui-shell/core';
import { doExecWithStdout } from './exec';
import commandPrefix from '../command-prefix';
const strings = i18n('plugin-kubectl');
export default function (args, exec) {
    return __awaiter(this, void 0, void 0, function* () {
        const cmd = args.argv[0] === commandPrefix ? args.argv[1] : args.argv[0];
        const raw = yield doExecWithStdout(args, undefined, exec);
        const content = raw.replace(/^ (.*)/gm, '        $1'); // code blocks: indentation >= 8
        return {
            apiVersion: 'kui-shell/v1',
            kind: 'NavResponse',
            breadcrumbs: [{ label: cmd }],
            links: [],
            menus: [
                {
                    label: strings('Usage'),
                    items: [
                        {
                            mode: strings('Introduction'),
                            content,
                            contentType: 'text/markdown'
                        }
                    ]
                }
            ]
        };
    });
}
//# sourceMappingURL=exec-to-markdown.js.map