"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcPercentage = calcPercentage;
exports.cpuPretty = cpuPretty;
exports.memPretty = memPretty;

var bytes = _interopRequireWildcard(require("bytes-iec"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @return the ratio a/b, pretty-printed as a percentage string
 *
 */
function calcPercentage(a, b) {
  if (a > 0 && b > 0) {
    return (a * 100 / b).toFixed(2) + '%';
  } else if (b > 0) {
    return '0%';
  } else {
    return 'Err';
  }
}
/**
 * @param sum cpu consumption in units of milliseconds
 *
 * @return the same figure, in units of fractional seconds
 *
 */


function cpuPretty(sum) {
  const n = sum / 1000;

  if (sum < 10000) {
    return n.toFixed(2);
  } else {
    return n.toFixed(0);
  }
}
/**
 * @param sum memory consumption, in units of bytes
 *
 * @return the same figure, pretty printed in a kb/MB/GB fashion
 *
 */


function memPretty(sum) {
  return bytes(sum, {});
}