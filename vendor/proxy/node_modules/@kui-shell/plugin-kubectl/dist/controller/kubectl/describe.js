"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.describer = describer;
exports.default = void 0;

var _exec = require("./exec");

var _commandPrefix = _interopRequireDefault(require("../command-prefix"));

var _get = require("./get");

var _help = require("../../lib/util/help");

var _util = require("../../lib/util/util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

/**
 * describe -> get
 *
 */
function prepareArgsForDescribe(args) {
  return `${args.command.replace(/(k|kubectl|oc)(\s+)describe(\s+)/, '$1$2get$3')} -o yaml`;
}

const doDescribe = command => function (args) {
  return __awaiter(this, void 0, void 0, function* () {
    if ((0, _help.isUsage)(args)) {
      return (0, _help.doHelp)(command, args);
    } else if ((0, _util.commandWithoutResource)(args)) {
      return (0, _exec.exec)(args, undefined, command);
    } else {
      // first, we do the raw exec of the given command
      const response = yield (0, _exec.exec)(args, prepareArgsForDescribe, command);
      return (0, _get.doGetAsEntity)(args, response);
    }
  });
};
/** Register a command listener */


function describer(registrar, command, cli = command) {
  registrar.listen(`/${_commandPrefix.default}/${command}/describe`, doDescribe(cli), _get.getFlags);
}

var _default = registrar => {
  describer(registrar, 'kubectl');
  describer(registrar, 'k', 'kubectl');
};

exports.default = _default;