/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { i18n } from '@kui-shell/core';
import { isKubeResource } from '@kui-shell/plugin-kubectl';
import flowView from '../../view/flow';
import { getPipelineFromRef, getTasks } from '../fetch';
import { isPipelineRun, isPipeline } from '../resource';
const strings = i18n('plugin-kubectl', 'tekton');
/**
 * The sidecar mode for the tekton flow visualization
 *
 */
const flowMode = {
    mode: 'flow',
    label: strings('flow'),
    content: (tab, resource) => __awaiter(void 0, void 0, void 0, function* () {
        if (isKubeResource(resource)) {
            if (isPipelineRun(resource)) {
                const [pipeline, tasks] = yield Promise.all([getPipelineFromRef(tab, resource), getTasks(tab)]);
                return { content: (yield flowView(tab, [pipeline].concat(tasks), resource)).content };
            }
            else if (isPipeline(resource)) {
                // fetch any accompanying Tasks
                const tasks = yield getTasks(tab);
                const view = yield flowView(tab, [resource].concat(tasks));
                return { content: view.content };
            }
            else {
                return { content: (yield flowView(tab, [resource])).content };
            }
        }
        else {
            // then resource is already the response we need
            return { content: resource.content };
        }
    }),
    defaultMode: true
};
export default flowMode;
//# sourceMappingURL=flow.js.map