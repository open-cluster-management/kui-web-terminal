"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _flow = _interopRequireDefault(require("../view/flow"));

var _read = require("../lib/read");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const usage = {
  command: 'flow',
  strict: 'flow',
  docs: 'Preview a Tekton pipeline',
  required: [{
    name: 'pipeline.yml',
    file: true,
    docs: 'path to a pipeline description file'
  }]
};
/**
 * This is the command handler that generates a tekton flow preview
 * from a given file.
 *
 */

var _default = commandTree => {
  commandTree.listen('/tekton/flow', ({
    argvNoOptions,
    tab
  }) => __awaiter(void 0, void 0, void 0, function* () {
    const filepath = argvNoOptions[argvNoOptions.indexOf('flow') + 1];
    const raw = yield (0, _read.read)(tab, filepath);
    const jsons = yield (0, _read.parse)(raw); // return a kui view

    const runs = undefined;
    return (0, _flow.default)(tab, jsons, runs, raw, filepath);
  }), {
    usage
  });
};

exports.default = _default;