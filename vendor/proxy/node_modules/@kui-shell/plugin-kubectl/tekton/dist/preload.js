"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _core = require("@kui-shell/core");

var _resource = require("./model/resource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright 2019 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const debug = (0, _debug.default)('plugins/tekton/preload');
debug('loading');

/**
 * A sidecar mode relevancy filter
 *
 */
function either(...filters) {
  return resource => filters.some(filter => filter(resource));
}

function registerModes(registrar) {
  return __awaiter(this, void 0, void 0, function* () {
    const [flowMode, traceMode, logsMode] = yield Promise.all([Promise.resolve().then(() => require('./model/modes/flow')), Promise.resolve().then(() => require('./model/modes/trace')), Promise.resolve().then(() => require('./model/modes/logs')) // SidecarMode for the tekton pipelinerun logs view
    ]);
    /** sidecar mode for tekton Flow view */

    const flowSpec = {
      mode: flowMode.default,
      when: either(_resource.isPipeline, _resource.isPipelineRun, _resource.isTask)
    };
    /** sidecar mode for tekton Flow view */

    /* const runSpec = {
       mode: runMode.default,
       when: either(isPipelineRun, isTaskRun)
       } */

    /** sidecar mode for tekton Flow view */

    const traceSpec = {
      mode: traceMode.default,
      when: _resource.isPipelineRun
    };
    /** sidecar mode for tekton Flow view */

    const logsSpec = {
      mode: logsMode.default,
      when: _resource.isPipelineRun
    };
    registrar.registerModes(flowSpec, traceSpec, logsSpec);
  });
}
/** on preload, register our sidecar modes */


var _default = registrar => {
  if (!(0, _core.isHeadless)()) {
    return registerModes(registrar);
  }
};

exports.default = _default;
debug('finished loading');