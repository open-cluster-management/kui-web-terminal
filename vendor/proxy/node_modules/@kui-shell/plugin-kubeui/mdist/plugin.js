var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import contexts from './controller/kubectl/contexts';
import create from './controller/kubectl/create';
import describe from './controller/kubectl/describe';
import kdelete from './controller/kubectl/delete';
import kget from './controller/kubectl/get';
import kgetNs from './controller/kubectl/get-namespaces';
import raw from './controller/kubectl/raw';
import run from './controller/kubectl/run';
import status from './controller/kubectl/status';
import top from './controller/kubectl/top';
import fetchFile from './controller/fetch-file';
import catchall from './controller/kubectl/catchall';
export default (registrar) => __awaiter(void 0, void 0, void 0, function* () {
    contexts(registrar);
    create(registrar);
    describe(registrar);
    kdelete(registrar);
    kget(registrar);
    kgetNs(registrar);
    raw(registrar);
    run(registrar);
    status(registrar);
    top(registrar);
    fetchFile(registrar);
    catchall(registrar);
});
//# sourceMappingURL=plugin.js.map